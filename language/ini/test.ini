

function f1(s) {
	return s + "_suffix"
}

_f1 = f1

function f1(s) {
	case {
		s ~ String {
			return _f1(s)
		}
		s ~ Int {
			return ""+(s+1)
		}
	}
}

println(f1("prefix"))
println(f1(2))

/*
declare type MyType = A | B

v1 = A

//println(v1~A)
//println(v1~B)
//println(v1~String)

a = true

println(v1)
*/

/*i = 1

println(i ~ Number)

i = 2
println(i)*/

/*import "ini/lib/chanop.ini" 
import "ini/lib/collect.ini" 
import "ini/lib/math.ini"
 
group = ["n1", "n2"]
num_samples = 10000
samples = [1..num_samples]

result = samples.toChannel().filter(sample => {
	//sleep(20)
	x = random() 
	y = random() 
	return x*x + y*y < 1.0 
}, group).count()
 
println("Pi is roughly " + 4.0 * result.to_double() / num_samples.to_double())
*/
/*
import "ini/lib/chanop.ini"

declare type Person = [name:String, age:Int]

l = [Person[name="Renaud", age=23],
     Person[name="Sacha", age=21], 
     Person[name="Joris", age=23],
     Person[name="Laurentiu", age=23],
     Person[name="CharlÃ¨ne", age=20],
     Person[name="Fabien", age=20],
     Person[name="Yann", age=21],
     Person[name="Yoann", age=22],
     Person[name="Paul", age=23],
     Person[name="Carlos", age=22],
     Person[name="Dany", age=20]
]

group = ["n1", "n2"]

result = l.toChannel().mapc(p => [p.age, [p.name]], group).reduceByKey((a, b) => a & b)

result.keys().foreach(k => sort(result[k]))

println(result)
*/


/*
 * import "ini/lib/chanop.ini" import "ini/lib/collect.ini"
 * 
 * declare type Person = [name:String, age:Int]
 * 
 * l = [Person[name="Renaud",age=23],Person[name="Sacha",age=6],
 * Person[name="Joris",age=23]]
 * 
 * c = channel().produceEach(l).stop() result = channel().map(c, p => [p.age,
 * [p.name]]).reduceByKey((a, b) => a & b) //c.stop() sleep(100) println(result)
 * println(result) println(result) println(result) println(result.to_json())
 */

/*
 * println("Connecting to Mongodb...") client = mongoClient("localhost:27017")
 * println("Connected.")
 * 
 * collection = client.database("test").collection("test") println("Writing to
 * Mongodb...") collection.insertOne(Person[key1="hello",name="Renaud"])
 * println("Wrote one document.")
 * 
 * println("Read and dump a collection:") it = collection.find() it.forEach(e =>
 * println(e))
 * 
 * it.toList().map(doc => fromDocument(Person[], doc)).foreach(e => { case e ~
 * Person[name] { println("valid person: "+e) } })
 */

// client.close()

/*
 * type Child = Boy[age:Int] | Girl[age:Int] type Person =
 * [name:String,firstName:String,age:Int,children:Child*] declare channel
 * +test_channel(Person)
 * 
 * function f(p) { case { //p of Person | !p.name || !p.firstName || !p.age { //
 * println("invalid person") //} p ~ Person[name=="renaud",firstName,!age] {
 * println("Recieved INVALID person: {p.firstName} {p.name}, {p.age}") } p ~
 * Boy[] { println("child {p.age}") } p ~ Person[name,firstName,age] {
 * println("Recieved person: {p.firstName} {p.name}, {p.age}") } } }
 * 
 * f(Person[name="renaud",firstName="pawlak",age=11])
 * 
 * f(Person[name="renaud",firstName="pawlak"])
 * 
 * f(Boy[age=2])
 * 
 * process p() { @consume(p) : [from=test_channel] { case { p of Person |
 * !p.name || !p.firstName || !p.age { println("invalid person") } p ~
 * Person[name,firstName,age] { println("Recieved person: {p.firstName}
 * {p.name}, {p.age}") } default { println("DEFAULT Recieved person: {p}") } } } }
 */

// p = Person[name="test"]

/*
 * declare channel +c0(Int) declare channel +c1(Int) declare channel +c2(Int)
 * declare predicate p1 "(<> end)"
 * 
 * process main() { @init() { p(c1, c2) : [node="n1"] p(c2, c0) : [node="n2"]
 * println("processes started") c1.produce(1) : [checkpoint="start"] } c =
 * @consume(v) : [channel=c0] { println("end of pipeline: {v}") :
 * [checkpoint="end"] stop(c) } }
 * 
 * process p(in, out) { c = @consume(v) : [channel=in] { println("{in}: {v}")
 * out.produce(v+1) stop(c) } }
 * 
 */