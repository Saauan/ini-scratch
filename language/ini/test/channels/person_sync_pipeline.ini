
import "ini/lib/collect.ini"
import "ini/lib/io.ini"

declare type PersonOrStop = Person[firstName:String, lastName:String, middleName:String, wikipedia:String] | Stop

declare channel +wikipedia_in(PersonOrStop) : [capacity=100]
declare channel +wikipedia_out(Person) : [capacity=100]

process enrich() {
	c1 = @consume(p) : [from = wikipedia_in] {
		sleep(20)
		case {
			p ~ Person[firstName, lastName] {
				println("Wikipedia Enrichment for {p.firstName} {p.lastName}")
				case p.middleName {
					url = url("https://en.wikipedia.org/wiki/{p.firstName}_{p.middleName}_{p.lastName}")
				} else {
					url = url("https://en.wikipedia.org/wiki/{p.firstName}_{p.lastName}")
				}
				case p.firstName == "Unknown" && p.lastName == "Person" {
						url = url("wrong url") // error
				}
				println("Fetching Wikipedia page: "+url)
				sleep(10) // p.wikipedia = fetch(url)
				p.wikipedia = "mock"
				case p ~ Person[wikipedia] {
					println("Sending back enriched person for "+url)
					wikipedia_out.produce(p)
				}
			}
			p ~ Stop {
				stop(c1)
			}
		}
	}
	@error(error) {
		case url {
			println("ERROR: " + url)
			//println(error)
		}
	}
	@end() {
		return
	}
}

function send_person_db() {
	persons = [Person[firstName="Jacques", lastName="Chirac"], 
	           Person[firstName="Barack", lastName="Obama"], 
	           Person[firstName="Albert", lastName="Einstein"],
	           Person[firstName="Titi"],
	           Person[firstName="Unknown", lastName="Person"],
	           Person[firstName="Edsger", middleName="W.", lastName="Dijkstra"]]
	persons.foreach(p => {
		case p ~ Person[firstName, lastName] {
			println("Sending person {p} for enrichment")
			wikipedia_in.produce(p)
		} else {
			println("Skipping wrong person {p}")
		}
	})
}

send_person_db()
result = enrich()
wikipedia_in.produce(Stop)
wait(result)
