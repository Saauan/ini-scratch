function main() {	
	l = [3,1,4,3,8,2,4,5,5,9,1,10,2,1,5,6]
	println(my_quick(l,0,size(l)-1))
	s = "This is a string to be sorted. It will be used as a list."
	println(my_quick(s,0,size(s)-1))
}

function oneStepPivot(l,pivot,i){
	case pivot+1 < size(l) && l[pivot] > l[i] {
		tmp = l[pivot]
		l[pivot] = l[i]
		l[i] = l[pivot+1]
		pivot++
		l[pivot] = tmp
	}
}

process partitionne(l,begin,fin){
	@init() {
		pivot = begin
		i = begin+1
	}
	i <= fin {
		oneStepPivot(l,pivot,i)
		i++
	}
	@end() {
		return pivot
	}
}

function my_quick(l,begin,fin){
	case begin < fin && begin+1 < size(l) {
		pivot = partitionne(l,begin,fin)
		my_quick(l,begin,pivot)
		my_quick(l,pivot+1,fin)
	}
	return l
}
