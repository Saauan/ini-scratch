
declare f1(Int)=>Void [class="any", target="any"]

process f2() { @init() { f1(2.1) } }

/*
function f1(a) {
	swap(a[0], a[1])
	return a[0]
}

i = 1
i = f1([1,2])
i = f1("ab")

function main() {
	//println(f1([1,2]))
	//println(f1("ab"))
	v1 = 2
	v2 = 4
	f2(v1, v2)
	println("> "+v1+", "+v2)
	v3 = "a"
	v4 = "b"
	f2(v3, v4)
	println("> "+v3+", "+v4)
}

function f1(a) {
	swap(a[0], a[1])
	return a
}

function f2(a, b) {
	swap(f(a), b)
	return
}

function f(a) {
	return a+1
}
*/
/*

T1(t1,t2,r) = (t1, t2 => r)
S(t1,t2,r) { // f2 constraints
  t1 = t2
  S2(t1) => t1 = Int
  r = Void
}

PASSE 1 : on garde les schemas dans les contraintes
T2 = Int
T3 = Int
S(T2,T3,T4) ==> il faudra substituer l'ensemble des contraintes mais ne pas Ã©galiser les types!! T2 != t1, mais bien T2 = T3
T5 = String
T6 = String
S(T5,T6,T7)

PASSE 2: on substitut les shemas

S2(t1,r) { // f constraints
  t1 = Int
  r = Int
}
*/