
/*
 * This examples shows a pretty printer for an XML structure.
 */

declare type Attr = [name:String,value:String]
declare type Xml = [name:String,text:String,id:Int,attr:Attr*,content:Xml*]

function main() {
	i=0
	xml = Xml[name = "html"]
	xml.content[0] = Xml[name = "head"]
	xml.content[1] = Xml[name = "body"]
	xml.content[1].attr[0] = Attr[name = "bgcolor", value = "white"]
	xml.content[1].attr[1] = Attr[name="width", value="100%"]
	xml.content[1].content[0] = Xml[text="this is a body text example "]
	b = Xml[name = "b"]
	xml.content[1].content[1] = b
	b.content[0] = Xml[text="this is a strong text"]
	pretty_print(xml)
	println(to_json(xml))
}

function pretty_print(xml,indent=0) {
	case xml ~ Xml[name,!text] {
		wait(print_tag(xml,indent))
	}
	case xml ~ Xml[!name,text] {
		println(xml.text)
	}
}

process print_tag(xml,indent) {
	@init() {
		wait(print_indent(indent))
		print("<"+xml.name)
		i = 0
		j = 0
	}
	i < size(xml.attr) {
		print(" "+xml.attr[i].name+"=\""+xml.attr[i].value+"\"")
		i++
	}
	i == size(xml.attr) {
		println(">")
		i++
	}
	i == size(xml.attr)+1 && j < size(xml.content) {
		pretty_print(xml.content[j++],indent+4)
	}
	@end() {
		wait(print_indent(indent))
		println("</"+xml.name+">")
	}
}

process print_indent(indent) {
	@init() {
		i=0
	}
	i < indent {
		print(" ")
		i++
	}
}