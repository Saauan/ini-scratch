/*
 * This example implements sort functions in several ways.
 */
function main() {
	// We try the sort functions on a list
	l = [3,1,4,3,8,2,4,5,5,9,1,10,2,1,5,6]
	println("Sorting '"+l+"'")
	// time gives the current system time in ms
	t1 = time()
	// note that l must be copied to remain unchanged (l is a reference)
	r1 = sort1(copy(l))
	println("Sort1 ("+(time()-t1)+" ms): '"+r1+"'")
	t1 = time()
	r1 = sort2(copy(l))
	println("Sort2 ("+(time()-t1)+" ms): '"+r1+"'")
	t1 = time()
	r1 = sort3(copy(l))
	println("Sort3 ("+(time()-t1)+" ms): '"+r1+"'")
	t1 = time()
	r = my_quick(copy(l),0,size(l)-1)
	println("Quicksort1 ("+(time()-t1)+" ms): '"+r+"'")
	t1 = time()
	r = quicksort(copy(l),0,size(l)-1)
	println("Quicksort2 ("+(time()-t1)+" ms): '"+r+"'")
		
	// note that strings behave like lists and can be sorted
	s = "This is a string to be sorted. It will be used as a list."
	println("Sorting '"+s+"'")
	t1 = time()
	r2 = sort1(copy(s))
	println("Sort1 ("+(time()-t1)+" ms): '"+r2+"'")
	t1 = time()
	r2 = sort2(copy(s))
	println("Sort2 ("+(time()-t1)+" ms): '"+r2+"'")
	t1 = time()
	r2 = sort3(copy(s))
	println("Sort3 ("+(time()-t1)+" ms): '"+r2+"'")
	t1 = time()
	r = my_quick(copy(s),0,size(s)-1)
	println("Quicksort1 ("+(time()-t1)+" ms): '"+r+"'")
	t1 = time()
	r = quicksort(copy(s),0,size(s)-1)
	println("Quicksort2 ("+(time()-t1)+" ms): '"+r+"'") 
}

/*
 * The simpliest way: swap adjacent elements while it is possible. This
 * implementation is very close to how a buble sort would work, but it is
 * rule-based.
 */
process sort1(s) {
	i of [0..size(s)-2] | s[i] > s[i+1] {
		swap(s[i],s[i+1])
	}
	@end() {
		return s
	}
}

/*
 * A more complicated way: swap any elements while it is possible. This
 * implementation is very unefficient but it demonstrates that it is possible to
 * "iterate" on several variables.
 */
process sort2(s) {
	i,j of [0..size(s)-1] | i < j && s[i] > s[j] {
		swap(s[i],s[j])
	}
	@end() {
		return s
	}
}

/*
 * An implementation that uses explicit indexes and stop condition (bubble-sort).
 */
process sort3(s) {
	@init() {
		i = 0
		swap = false
		size = size(s)-1
	}
	i < size && s[i] > s[i+1] {
		swap(s[i],s[i+1])
		swap = true
		i++
	}
	i < size && s[i] <= s[i+1] {
		i++
	}
	i==size && swap {
		swap = false
		i = 0
	}
	@end() {
		return s
	}
}



function quicksort(s,lo,hi){
	case hi>lo {
		p = partition(s,lo,hi,lo)
		quicksort(s, lo, p-1)
	    quicksort(s, p+1, hi)
	}
	return s
}

process partition(s,lo,hi,pivotIndex){
	@init() {
		pivotValue = s[pivotIndex]
		swap(s[pivotIndex],s[hi])
		index=lo
		i=lo
	}
	i<hi && s[i]<=pivotValue {
		swap(s[i],s[index])
		index++
		i++
	}
	i<hi && s[i]>pivotValue {
		i++
	}
	@end() {
		swap(s[hi], s[index])
		return index
	}
}

function oneStepPivot(l,pivot,i) {
	case pivot+1 < size(l) && l[pivot] > l[i] {
		tmp = l[pivot]
		l[pivot] = l[i]
		l[i] = l[pivot+1]
		pivot++
		l[pivot] = tmp
	}
}

process partitionne(l,begin,fin){
	@init() {
		pivot = begin
		i = begin+1
	}
	i <= fin {
		oneStepPivot(l,pivot,i)
		i++
	}
	@end() {
		return pivot
	}
}

function my_quick(l,begin,fin){
	case begin < fin && begin+1 < size(l) {
		pivot = partitionne(l,begin,fin)
		my_quick(l,begin,pivot)
		my_quick(l,pivot+1,fin)
	}
	return l
}
