/**
 * This program finds all the solutions to the N-queen puzzle
 */
function main() {
	@init() {
		// start with the longuest diagonal
		pos = [ [0,0], [1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7] ]
		history[0]=pos
		print_pos(find_solutions(0,history))
	}
	@end() {
		println("End.")
	}
}

//function rotate(pos) {
//	@init() {
//		
//	}
//}

function check_solution(pos) {
	i,j of [0..size(pos)-1] | i<j && 
		(pos[i][0]-pos[i][1] == pos[j][0]-pos[j][1] || 
				pos[i][0]+pos[i][1] == pos[j][0]+pos[j][1]) {
		return false
	}
	@end() {
		return true
	}	
}

function find_solutions(index,history) {
	@init() {
		pos = copy(history[index])
		steps = 0
		println("Searching with initial position:")
		print_pos(pos)
	}
	check_solution(pos) {
		println("\nFound solution in "+steps+" steps:")
		print_pos(pos)
	}
	i,j of [0..size(pos)-1] | i<j && 
		!key(history, pos[0..i-1] & [[pos[j][0],pos[i][1]]] &
					  pos[i+1..j-1] & [[pos[i][0],pos[j][1]]] &
					  pos[j+1..size(pos)-1]) {
		swap(pos[i][0], pos[j][0])
		history[size(history)]=copy(pos)
		steps++
		print(".")
		//print_pos(pos)
	}	
}

function print_pos(pos, i=0, j=0) {
	@init() {
		in = key(pos,[i,j])
	}
	in {
		print("Q ")
	}
	!in {
		print("- ")
	}
	i < size(pos)-1 {
		print_pos(pos,i+1,j)
		return 
	}
	i == size(pos)-1 && j < size(pos)-1 {
		println("")
		print_pos(pos,0,j+1)
		return 
	}
	i == size(pos)-1 && j == size(pos)-1 {
		println("")
		return
	}	
}

