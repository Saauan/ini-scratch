
declare type ServerSocket < Closeable
declare type DataOutputStream < Closeable
declare socket_server(Int) => ServerSocket : [class="java.net.ServerSocket", target="new(..)"]
declare socket_accept(ServerSocket) => Socket : [class="java.net.ServerSocket", target="accept(..)"]
declare socket_address(Socket) => InetAddress : [class="java.net.Socket", target="getInetAddress(..)"]
declare host_name(InetAddress) => String : [class="java.net.InetAddress", target="getHostName(..)"]
declare socket_input_stream(Socket) => InputStream : [class="java.net.Socket", target="getInputStream(..)"]
declare socket_output_stream(Socket) => OutputStream : [class="java.net.Socket", target="getOutputStream(..)"]
declare reader(InputStream) => Reader : [class="java.io.InputStreamReader", target="new(..)"]
declare buffered_reader(Reader) => BufferedReader : [class="java.io.BufferedReader", target="new(..)"]
declare data_output_stream(OutputStream) => DataOutputStream : [class="java.io.DataOutputStream", target="new(..)"]
declare read_line(BufferedReader) => String : [class="java.io.BufferedReader", target="readLine(..)"]
declare write_string(DataOutputStream,String) => Void : [class="java.io.DataOutputStream", target="writeBytes(..)"]
declare close(Closeable) => Void : [class="java.io.Closeable", target="close(..)"]
declare channel server(String)

process main() {
	@init() {
		start_http_server(8080, handler)
	}
}

process start_http_server(port, handler) {
	@init() {
		s = socket_server(port)
		c = any()
		println("Server started on "+port)
	}
	s { 
		c = socket_accept(s)
	}
	e1 = @update(old,c) : [variable=c, mode="async"] {
		client = socket_address(c)
		println(to_string(host_name(client))+" connected to server")
		in = buffered_reader(reader(socket_input_stream(c)))
		out = data_output_stream(socket_output_stream(c))
		handle_http_request(in, out, handler)
	}
	@error(e) {
		//println("error: "+e)
	}
	e2 = @consume(data) : [channel=server] && data == "stop" {
		println("Closing server")
		stop(e1)
		stop(e2)
		close(s)
		clear(s)
	}
}

process handle_http_request(in, out, handler) {
	@init() {
		line = any()
	}
	line != "" {
		line = read_line(in)
	}
	line ~ regexp("GET (.*) (.*)", path, version) {
		println("GET REQUEST: "+path+" - "+version)
	}
	path {
		body = handler(path)
		write_string(out, "HTTP/1.0 200 OK\r\n")
		write_string(out, "Connection: close\r\n")
		write_string(out, "Server: INI v0\r\n")
		write_string(out, "Content-Type: text/html\r\n")
		write_string(out, "Content-Length: "+size(body)+"\r\n\r\n")
		write_string(out, body)
		clear(path)
		close(out)
	}
}

function handler(path) {
	s = "hello world-wide web @"+path
	case path == "/test" {
		s = s + " -- test page"
	}
	case path == "/stop" || path == "/close" {
		s = "bye!"
		produce(server, "stop")
	}
	return s
}
