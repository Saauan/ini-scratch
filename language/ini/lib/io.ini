
import "ini/lib/core.ini"

declare file(String)=>File : [class="java.io.File", target="new(..)"]
declare exists(File)=>Boolean : [target="exists(..)"]
declare is_directory(File)=>Boolean : [target="isDirectory(..)"]
declare name(File)=>String : [target="getName(..)"]
declare list(File)=>File* : [target="listFiles(..)"]
declare mkdirs(File)=>Boolean : [target="mkdirs(..)"]

declare type FileWriter < Writer
declare file_writer(File)=>FileWriter : [class="java.io.FileWriter", target="new(..)"]
declare writer_append(FileWriter,String)=>Void : [target="write(..)"]
declare writer_println(Writer,String)=>Void : [target="println(..)"]

declare file_input_stream(File)=>InputStream : [class="java.io.FileInputStream", target="new(..)"]

declare type BufferedReader < Reader
declare type DataOutputStream < OutputStream
declare reader(InputStream)=>Reader : [class="java.io.InputStreamReader", target="new(..)"]
declare buffered_reader(Reader)=>BufferedReader : [class="java.io.BufferedReader", target="new(..)"]
declare data_output_stream(OutputStream)=>DataOutputStream : [class="java.io.DataOutputStream", target="new(..)"]
declare read_line(BufferedReader)=>String : [target="readLine(..)"]
declare read_char(BufferedReader)=>Int : [target="read(..)"]
declare write_string(DataOutputStream,String)=>Void : [target="writeBytes(..)"]

declare type URL
declare url(String) => URL : [class="java.net.URL", target="new(..)"]
declare fetch(URL) => String : [class="org.apache.commons.io.IOUtils", target="toString(..)"]

function read_string(buffered_reader, count) {
	i = 0
	s = ""
	c = 0
	case i < count && c!=-1 {
		c = read_char(buffered_reader)
		s[i++] = to_char(c)
	}
	return s
}

function read_all_string(buffered_reader) {
	i = 0
	s = ""
	c = 0
	case c!=-1 {
		c = read_char(buffered_reader)
		s[i++] = to_char(c)
	}
	return s
}


/*
 * A simple function to write a string in a file.
 */
function file_write_content(file_path,string) {
	f = file_writer(file(file_path))
	writer_append(f,string)
	close(f)
}

function file_read_content(file_path) {
	fis = file_input_stream(file(file_path))
	content = read_all_string(buffered_reader(reader(fis)))
	close(fis)
	return content
}
