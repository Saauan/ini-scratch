
import "ini/lib/math.ini"
import "ini/lib/collect.ini"

/**
 * Applies a lambda asynchronously (in a new process).
 */
function async(f) {
	runner = () ~> {
		@init() {
			f()
		}
	}
	runner()
}

/**
 * Produces all the elements of the iterable in the channel, then produces a
 * stop message.
 * 
 * @param channel
 *            the channel to produce to
 * @param iterable
 *            the elements to be produced
 * @return channel
 */
function produceEach(channel, iterable) {
	producer = (c) ~> {
		@init() {
			iterable.foreach(e => {
				c.produce(e)
			})
		}
		@end() {
			channel.stop()
		}
	}
	producer(channel)
	return channel
}

/**
 * Fully reads the iterable content and adds it to a new channel. Note that once
 * the channel has been filled with the content, this function sends the 'stop'
 * message to the channel.
 * 
 * @param iterable
 *            the iterable to read elements from
 * @return the new channel (where all the elements have been produced)
 */
function toChannel(iterable) {
	return produceEach(channel(), iterable)
}

/**
 * Consumes the given channel elements and applies the handler to each of them.
 * The underlying process will end when a 'stop' message is received from the
 * channel.
 * 
 * @param channel
 *            the input channel to consume from
 * @param handler
 *            the function to apply to each consume element
 * @param node
 *            the node where to run the consume process (local node if
 *            unspecified)
 */
function consume(channel, handler, node="") {
	consumeProcess = (channel, handler) ~> {
		@consume(value) : [channel = channel] {
			handler(value)
		}
	}
	consumeProcess(channel, handler) : [node=node]
	return channel
}

/**
 * Consumes one element in the given channel and applies the handler.
 * 
 * @param channel
 *            the input channel to consume from
 * @param handler
 *            the function to apply to the consumed element
 * @param node
 *            the node where to run the consume process (local node if
 *            unspecified)
 */
function consumeOnce(channel, handler, node="") {
	consumeProcess = (channel, handler) ~> {
		c=@consume(value) : [channel = channel] {
			handler(value)
			c.stop()
		}
	}
	consumeProcess(channel, handler) : [node=node]
	return channel
}

function merge(src1, src2) {
	dst = channel()
	mergeProcess(dst, src1, src2)
	return dst
}

function duplicate(src, dst1, dst2, node="") {
	duplicateProcess(src, dst1, dst2) : [node=node]
	return src
}

function roundRobin(src, outs, node="") {
	roundRobinProcess(src, outs) : [node=node]
	return outs
}

/**
 * Filters the elements thanks to the given predicate and produce them to a new
 * channel. If a list of nodes is provided, the filtering is concurrently
 * performed and distributed over the given nodes.
 * 
 * @param src
 *            the input channel
 * @param predicate
 *            the filtering function
 * @param nodes
 *            the nodes to which the filtering processes will be deployed
 * @return a new channel containing the filtered elements
 */
function filter(src, predicate, nodes=[]) {
	filterProcess = (src, dst, predicate) ~> {
		@consume(v) : [from=src] && predicate(v) {
			dst.produce(v)
		}
		@end() {
			dst.stop()
		}
	}
    return distribute(src, (src, dst, node) => {
		filterProcess(src, dst, predicate) : [node=node]
	}, nodes)
}

function combineLastest(dst, src1, src2, combiner, node="") {
	combineLatestProcess(dst, src1, src2, combiner) : [node=node]
	return dst
}

/**
 * Gets all the incoming elements and produces them to an output channel with a
 * given delay.
 * 
 * @param src
 *            the input channel
 * @param time
 *            the delay in milliseconds
 * @return the output channel
 */
function delay(src, time) {
	delayProcess = (src, dst, time) ~> {
		@consume(v) : [from=src] {
			sleep(time)
			dst.produce(v)
		}
		@end() {
			dst.stop()
		}
	}
	dst = channel()
	delayProcess(src, dst, time)
	return dst
}

function distribute(src, startProcess, nodes=[]) {
	case nodes.size() == 0 {
		dst = channel()
		startProcess(src, dst, node())
	} else {
		hasRemote = false
		nodes.foreach(node => {
			case node != node() {
				hasRemote = true
			}
		})
		tmpIn = channel(hasRemote?Global:Local)
		tmpOut = channel(hasRemote?Global:Local)
		nodes.foreach(node => {
			startProcess(tmpIn, tmpOut, node)
		})
		bind(src, tmpIn, 1, nodes.size())
		dst = channel()
		bind(tmpOut, dst, nodes.size(), 1)
	}
	return dst
}

/**
 * Maps all the elements in the input channel to new elements that will be
 * produced in a new output channel. If a list of nodes is provided, the mapping
 * is concurrently performed and distributed over the given nodes.
 * 
 * @param src
 *            the input channel
 * @param mapper
 *            the mapping function
 * @param nodes
 *            the nodes to which the mapping processes will be deployed
 * @return a new channel containing the results of the mappings
 */
function mapc(src, mapper, nodes=[]) {
	mapProcess = (src, dst, mapper) ~> {
		@consume(v) : [from=src] {
			dst.produce(mapper(v))
		}
		@end() {
			dst.stop()
		}
	}
    return distribute(src, (src, dst, node) => {
		mapProcess(src, dst, mapper) : [node=node]
	}, nodes)
}

function zip(dst, src, tick, zipper=x=>x, node="") {
	zipProcess(dst, src, tick, zipper) : [node=node]
	return dst
}

/**
 * Reduces key->value tuples and returns the result in a map. The process ends
 * when receiving a 'stop' message.
 * 
 * @param src
 *            the input channel (should contain key->value tuples)
 * @param reducer
 *            a function taking the currently accumulated value for a given key
 *            and the new incoming value for that key (should return the new
 *            accumulated value)
 * @return a map will all the keys and corresponding accumulated values
 */
function reduceByKey(src, reducer, node="") {
	reduceByKeyProcess = (src, reducer) ~> {
		@init() {
			accumulator = []
		}
		@consume(v) : [from=src] {
		 	accumulator[v[0]] = reducer(accumulator[v[0]], v[1])
		}
		@end() {
			return accumulator
		}
	}	
	return reduceByKeyProcess(src, reducer) : [node=node]
}

/**
 * Collects all the elements from a channel (until the 'stop' message) and
 * returns them as a list. Note that the collect process will end when receiving
 * a 'stop' message.
 * 
 * @param src
 *            the channel to collect values from
 * @return a list containing all the collected values
 */
process collect(src) {
	@init() {
		result = []
	}
	@consume(v) : [from=src] {
		result = result & v
	}
	@end() {
		return result
	}
}

/**
 * Count all the elements from a channel until the 'stop' message. Note that the
 * count process will end when receiving a 'stop' message.
 * 
 * @param src
 *            the channel to count from
 * @return the number of elements counted from the channel
 */
process count(src) {
	@init() {
		result = 0
	}
	@consume(v) : [from=src] {
		result = result + 1
	}
	@end() {
		return result
	}
}

process mergeProcess(dst, src1, src2) {
	@consume(v) : [from=src1] {
		dst.produce(v)
	}
	@consume(v) : [from=src2] {
		dst.produce(v)
	}
	@end() {
		dst.stop()
	}
}

process combineLatestProcess(dst, src1, src2, combiner) {
	@init() {
		latest1 = any()
		latest2 = any()
	}
	$(c2) c1 = @consume(v) : [from=src1] {
		latest1 = v
		case latest2 {
			dst.produce(combiner(latest1, latest2))
		}
	}
	$(c1) c2 = @consume(v) : [from=src2] {
		latest2 = v
		case latest1 {
			dst.produce(combiner(latest1, latest2))
		}
	}
	@end() {
		dst.stop()
	}
}

process zipProcess(src, dst, tick, zipper) {
	@init() {
		buffer = []
	}
	@consume() : [from=tick] {
		dst.produce(zipper(buffer))
		buffer = []
	}
	@consume(v) : [from=src] {
		buffer = buffer & [v]
	}
}

process duplicateProcess(src, dst1, dst2) {
	@consume(v) : [from=src] {
		dst1.produce(v)
		dst2.produce(v)
	}
	@end() {
		dst1.stop()
		dst2.stop()
	}
}

process roundRobinProcess(src, outs) {
	@init() {
		i = 0
	}
	@consume(v) : [from=src] {
		outs[i].produce(v)
		i = mod(i + 1, outs.size())
	}
	@end() {
		outs.foreach(dst => dst.stop())
	}
}

/**
 * Binds a channel to another. All the elements of the input channel will be
 * forwarded to the output channel. The bind process will expect as many 'stop'
 * messages as the declared producers in order to end. Also, when ending, the
 * bind process will send as many 'stop' messages as the declared consumers.
 * 
 * @param src
 *            the input channel
 * @param dst
 *            the output channel
 * @param producers
 *            the number of producers producing on the input channel (default is
 *            1)
 * @param consumers
 *            the number of consumers consuming on the output channel (default
 *            is 1)
 */
function bind(src, dst, producers=1, consumers=1) {
	bindProcess = (src, dst, producers, consumers) ~> {
		@consume(v) : [from=src, stop=producers] {
			dst.produce(v)
		}
		@end() {
			[1..consumers].foreach(i => dst.stop())
		}
	}
	bindProcess(src, dst, producers, consumers)
	return dst
}

