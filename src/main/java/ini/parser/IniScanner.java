/* The following code was generated by JFlex 1.3.5 on 12/5/19 11:38 AM */


/*
 * This source code file is the exclusive property of its author. No copy or 
 * usage of the source code is permitted unless the author contractually 
 * allows it under the terms of a well-defined agreement.
 */

package ini.parser;

import java_cup.runtime.*;
import ini.ast.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 12/5/19 11:38 AM from the specification file
 * <tt>file:/Users/renaudpawlak/Documents/INI/ini/src/main/java/ini/parser/ini.lex</tt>
 */
class IniScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int LAMBDA = 4;
  final public static int STRING = 1;
  final public static int EMBEDED_EXPRESSION2 = 6;
  final public static int EMBEDED_EXPRESSION1 = 5;
  final public static int YYINITIAL = 0;
  final public static int PREDICATE = 7;
  final public static int CHAR = 2;
  final public static int USERTYPE = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\53\1\5"+
    "\1\10\1\57\1\0\1\60\1\63\1\17\1\16\1\7\1\61\1\20"+
    "\1\42\1\15\1\6\1\12\11\14\1\44\1\0\1\51\1\52\1\43"+
    "\1\56\1\62\32\13\1\47\1\4\1\50\1\0\1\11\1\0\1\35"+
    "\1\11\1\32\1\40\1\33\1\27\1\11\1\37\1\21\2\11\1\36"+
    "\1\22\1\31\1\24\1\23\1\11\1\25\1\34\1\26\1\30\3\11"+
    "\1\41\1\11\1\45\1\55\1\46\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    52,   104,   156,   208,   260,   312,   364,   416,   416, 
      468,   416,   520,   572,   416,   624,   676,   728,   780,   832, 
      884,   416,   936,   416,   988,  1040,  1092,  1144,  1196,  1248, 
     1300,  1352,  1404,  1456,  1508,   416,   416,   416,   416,   416, 
     1560,  1612,  1664,   416,  1716,   416,   416,  1768,  1820,   416, 
      416,   416,   416,  1872,  1924,   416,   416,  1976,  2028,  2080, 
     2132,  2184,  2236,   416,   416,   416,   416,  2288,  2340,   416, 
      416,   416,  2392,  2444,   416,  1716,   416,  2496,   416,  2548, 
     2600,  1612,  1768,   416,   416,   624,  2652,   468,  2704,  2756, 
     2808,  2860,  2912,   416,   936,  2964,  3016,  2704,  3068,  3120, 
      676,  3172,  3224,  3276,  3328,  3380,  3432,  3484,  3536,   416, 
      416,   416,   416,   416,   416,   416,   416,   416,   416,   416, 
     1924,   416,   416,  3588,  3640,  3692,  3744,  3796,  2184,  3848, 
      416,   416,   416,   416,  3900,  3952,   416,   416,  4004,   416, 
     4056,  4108,  4160,  4212,  4264,  4316,  4368,  4420,  4472,  4524, 
     4576,  4628,  4680,  4732,  4784,  4836,  4888,  4940,  4992,  5044, 
     5096,  5148,  5200,  5252,   676,   676,  5304,  5356,   676,   676, 
     5408,  5460,  5512,  5564,  5616,  5668,  5720,  5772,  5824,  5876, 
     5928,   676,  5980,  6032,  6084,   416,  6136,  6188,   676,  6240, 
      676,  6292,  6344,  6396,  6448,  6500,  6552,   676,  6604,   676, 
     6656,  6708,  6760,   676,  6812,  6864,  6916,  6968,  7020,  7072, 
     7124,  7176,  7228,  7280,  7332,  7384,  7436,  7488,  7540,  7592, 
     7644,  7696,  7748,  7800,  7852,   676,  7904,  7956,   416,  8008, 
     8060,  8112,  8164,  8216,  8268,  8320,  8372,  8424,  8476,   676, 
     8528,   416,  8580,  8632,   676,   416
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\11\1\12\1\13\1\14\1\11\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\21\1\32\1\33\1\34\1\35\1\36"+
    "\2\21\1\37\1\40\4\21\1\41\1\21\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\2\64\1\66\1\65\37\64\1\67\16\64"+
    "\1\70\1\71\2\70\1\72\56\70\1\71\1\11\1\73"+
    "\1\74\1\14\2\11\1\75\1\17\1\76\1\77\1\11"+
    "\1\23\4\11\1\30\21\77\2\11\1\44\2\11\1\47"+
    "\1\50\1\100\1\101\2\11\1\102\7\11\1\12\1\11"+
    "\1\14\2\11\1\75\1\11\1\76\1\77\4\11\1\26"+
    "\1\103\1\30\21\77\10\11\1\104\1\11\1\105\54\11"+
    "\1\106\1\107\23\11\1\110\1\17\1\11\1\77\1\22"+
    "\1\11\1\24\1\111\1\26\1\103\1\30\21\77\1\112"+
    "\2\11\1\103\1\113\1\47\1\50\1\11\1\52\1\53"+
    "\1\54\1\114\1\56\1\57\1\60\1\61\3\11\1\115"+
    "\1\116\1\14\2\11\1\110\1\17\1\11\1\77\1\22"+
    "\1\11\1\24\1\11\1\26\1\103\1\11\21\77\1\117"+
    "\1\43\3\11\1\120\1\11\1\121\1\122\1\53\1\11"+
    "\1\114\2\11\1\123\1\124\2\11\65\0\1\12\67\0"+
    "\1\125\64\0\1\126\1\127\54\0\1\126\1\12\1\130"+
    "\61\126\1\0\1\131\1\132\1\131\5\0\4\21\4\0"+
    "\21\21\10\0\1\133\1\0\1\133\24\0\1\134\57\0"+
    "\4\23\4\0\21\23\34\0\1\24\1\0\1\24\1\134"+
    "\57\0\1\135\3\0\1\136\3\0\21\135\23\0\1\137"+
    "\1\140\1\137\5\0\1\141\4\0\1\142\2\0\21\141"+
    "\23\0\1\131\1\132\1\131\5\0\4\21\4\0\1\21"+
    "\1\143\17\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\4\21\1\144\14\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\6\21\1\145\12\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\12\21\1\146\6\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\4\21"+
    "\1\147\11\21\1\150\2\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\7\21"+
    "\1\151\4\21\1\152\4\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\14\21"+
    "\1\153\4\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\15\21\1\154\3\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\12\21\1\155\6\21\10\0\1\133"+
    "\1\0\1\133\51\0\1\156\1\157\72\0\1\160\63\0"+
    "\1\161\54\0\1\162\6\0\1\163\63\0\1\164\66\0"+
    "\1\165\66\0\1\166\64\0\1\167\7\0\1\64\37\0"+
    "\1\170\16\0\1\171\1\0\44\171\1\172\15\171\63\0"+
    "\1\70\1\0\1\173\1\174\20\0\1\175\2\0\1\176"+
    "\1\177\10\0\1\200\24\0\1\73\70\0\1\201\1\127"+
    "\54\0\1\201\1\14\1\202\61\201\11\0\4\77\4\0"+
    "\21\77\65\0\1\203\63\0\1\204\31\0\1\135\7\0"+
    "\21\135\64\0\1\156\22\0\1\115\132\0\1\205\56\0"+
    "\1\206\6\0\1\161\11\0\7\207\1\210\54\207\1\0"+
    "\1\131\1\132\1\131\46\0\1\133\1\0\1\133\10\0"+
    "\1\131\125\0\1\211\32\0\1\212\1\0\1\213\60\0"+
    "\4\135\2\0\1\214\1\0\21\135\23\0\1\137\63\0"+
    "\1\215\1\216\1\215\5\0\4\141\1\0\1\142\1\0"+
    "\1\217\21\141\23\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\2\21\1\220\16\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\3\21"+
    "\1\221\15\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\5\21\1\222\13\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\7\21\1\223\11\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\1\224\20\21\10\0\1\133\1\0\1\133\10\0"+
    "\1\131\1\132\1\131\5\0\4\21\4\0\10\21\1\225"+
    "\10\21\10\0\1\133\1\0\1\133\10\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\15\21\1\226\3\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\13\21\1\227\5\21\10\0\1\133\1\0"+
    "\1\133\10\0\1\131\1\132\1\131\5\0\4\21\4\0"+
    "\13\21\1\230\5\21\10\0\1\133\1\0\1\133\10\0"+
    "\1\131\1\132\1\131\5\0\4\21\4\0\6\21\1\231"+
    "\2\21\1\232\7\21\10\0\1\133\1\0\1\133\10\0"+
    "\1\173\107\0\1\233\77\0\1\234\52\0\1\235\66\0"+
    "\1\236\31\0\1\14\62\0\7\207\1\237\54\207\7\210"+
    "\1\240\54\210\12\0\1\213\1\0\1\213\50\0\1\215"+
    "\1\216\1\215\12\0\1\142\1\0\1\217\44\0\1\215"+
    "\63\0\1\217\1\241\1\217\5\0\1\141\7\0\21\141"+
    "\23\0\1\131\1\132\1\131\5\0\4\21\4\0\3\21"+
    "\1\242\15\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\11\21\1\243\7\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\7\21\1\244\11\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\12\21\1\245\6\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\13\21"+
    "\1\246\5\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\11\21\1\247\7\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\13\21\1\250\5\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\12\21\1\251\6\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\12\21"+
    "\1\252\6\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\14\21\1\253\4\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\15\21\1\254\3\21\10\0\1\133"+
    "\1\0\1\133\33\0\1\255\62\0\1\256\71\0\1\257"+
    "\64\0\1\260\31\0\6\207\1\14\1\237\54\207\6\210"+
    "\1\14\1\261\54\210\1\0\1\217\63\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\4\21\1\262\14\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\12\21\1\263\6\21\10\0\1\133\1\0"+
    "\1\133\10\0\1\131\1\132\1\131\5\0\4\21\4\0"+
    "\4\21\1\264\14\21\10\0\1\133\1\0\1\133\10\0"+
    "\1\131\1\132\1\131\5\0\4\21\4\0\5\21\1\265"+
    "\13\21\10\0\1\133\1\0\1\133\10\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\12\21\1\266\6\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\7\21\1\267\11\21\10\0\1\133\1\0"+
    "\1\133\10\0\1\131\1\132\1\131\5\0\4\21\4\0"+
    "\14\21\1\270\4\21\10\0\1\133\1\0\1\133\41\0"+
    "\1\271\64\0\1\272\62\0\1\273\67\0\1\274\25\0"+
    "\6\210\1\0\1\261\54\210\1\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\5\21\1\275\13\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\13\21\1\276\5\21\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\10\21"+
    "\1\277\10\21\10\0\1\133\1\0\1\133\10\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\1\300\20\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\15\21\1\301\3\21\10\0\1\133\1\0"+
    "\1\133\10\0\1\131\1\132\1\131\5\0\4\21\4\0"+
    "\4\21\1\302\14\21\10\0\1\133\1\0\1\133\42\0"+
    "\1\303\56\0\1\304\72\0\1\305\27\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\13\21\1\306\5\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\3\21\1\307\15\21\10\0\1\133\1\0"+
    "\1\133\10\0\1\131\1\132\1\131\5\0\4\21\4\0"+
    "\5\21\1\310\13\21\10\0\1\133\1\0\1\133\10\0"+
    "\1\131\1\132\1\131\5\0\4\21\4\0\12\21\1\311"+
    "\6\21\10\0\1\133\1\0\1\133\43\0\1\312\50\0"+
    "\1\313\67\0\1\256\37\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\10\21\1\314\10\21\10\0\1\133\1\0"+
    "\1\133\10\0\1\131\1\132\1\315\5\0\4\21\4\0"+
    "\2\21\1\316\2\21\1\317\3\21\1\320\7\21\10\0"+
    "\1\133\1\0\1\133\43\0\1\272\53\0\1\321\40\0"+
    "\1\131\1\132\1\315\17\0\1\322\2\0\1\323\3\0"+
    "\1\324\17\0\1\133\1\0\1\133\10\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\4\21\1\325\14\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\20\21\1\326\10\0\1\133\1\0\1\133"+
    "\10\0\1\131\1\132\1\131\5\0\4\21\4\0\16\21"+
    "\1\327\2\21\10\0\1\133\1\0\1\133\40\0\1\272"+
    "\57\0\1\330\77\0\1\331\61\0\1\332\25\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\12\21\1\333\6\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\2\21\1\334\16\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\14\21\1\335\4\21\10\0\1\133\1\0\1\133"+
    "\42\0\1\336\53\0\1\337\75\0\1\340\27\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\17\21\1\341\1\21"+
    "\10\0\1\133\1\0\1\133\10\0\1\131\1\132\1\131"+
    "\5\0\4\21\4\0\12\21\1\342\6\21\10\0\1\133"+
    "\1\0\1\133\10\0\1\131\1\132\1\131\5\0\4\21"+
    "\4\0\10\21\1\343\10\21\10\0\1\133\1\0\1\133"+
    "\47\0\1\344\56\0\1\345\61\0\1\346\33\0\1\131"+
    "\1\132\1\131\5\0\4\21\4\0\1\347\20\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\10\21\1\350\10\21\10\0\1\133\1\0"+
    "\1\133\30\0\1\351\73\0\1\352\33\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\11\21\1\353\7\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\12\21\1\354\6\21\10\0\1\133\1\0"+
    "\1\133\41\0\1\355\64\0\1\356\31\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\14\21\1\357\4\21\10\0"+
    "\1\133\1\0\1\133\10\0\1\131\1\132\1\131\5\0"+
    "\4\21\4\0\15\21\1\360\3\21\10\0\1\133\1\0"+
    "\1\133\44\0\1\361\64\0\1\362\26\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\5\21\1\363\13\21\10\0"+
    "\1\133\1\0\1\133\35\0\1\364\36\0\1\131\1\132"+
    "\1\131\5\0\4\21\4\0\12\21\1\365\6\21\10\0"+
    "\1\133\1\0\1\133\42\0\1\366\30\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  1,  9,  1,  1,  9,  1, 
     3,  1,  1,  1,  3,  9,  1,  9,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  1,  1,  9,  9,  9,  9,  9,  1,  1,  1,  9,  1,  9,  9,  1, 
     1,  9,  9,  9,  9,  1,  3,  9,  9,  1,  3,  1,  1,  1,  1,  9, 
     9,  9,  9,  1,  1,  9,  9,  9,  3,  1,  9,  1,  9,  1,  9,  1, 
     1,  1,  1,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  0, 13,  9,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  9,  9,  0,  0, 13,  9,  1, 13,  0,  0,  0,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0,  0,  0,  0,  0, 
     0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0,  0,  0, 
     0,  3,  3,  3,  3,  3,  3,  3,  0, 13,  0,  0,  3,  3,  3,  3, 
     3,  3,  0,  0,  0,  3,  3,  3,  3,  0,  0,  3,  0,  3,  3,  3, 
     0,  0,  0,  0,  3,  3,  3,  0,  0,  0,  3,  3,  3,  0,  0,  0, 
     3,  3,  3,  0,  9,  0,  3,  3,  0,  0,  3,  3,  0,  0,  3,  3, 
     0,  9,  3,  0,  3,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	StringBuffer string=new StringBuffer();
	String fileName;
	public void setFileName(String name) {
		fileName=name;
	}
	public String getFileName() {
		return fileName;
	}
	private Symbol symbol(int type) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,yytext(),
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Symbol emptyString() {
		return new Symbol(sym.STRING,yyline,yycolumn,
		    new Token(sym.STRING,fileName,"",
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+0));
	}
	private Symbol symbol(int type, String text) {
		return new Symbol(sym.STRING,yyline,yycolumn,
		    new Token(sym.STRING,fileName,text,
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+0));
	}
	
	//private Symbol symbol(int type,Object value) {
	//	return new Symbol(type,yyline,yycolumn,value);
	//}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IniScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  IniScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[8684];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 16: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 98: 
        case 99: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 161: 
        case 162: 
        case 163: 
        case 166: 
        case 167: 
        case 170: 
        case 171: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 182: 
        case 183: 
        case 189: 
        case 191: 
        case 192: 
        case 193: 
        case 198: 
        case 205: 
        case 206: 
        case 207: 
        case 212: 
        case 213: 
        case 214: 
        case 218: 
        case 219: 
        case 220: 
        case 224: 
        case 226: 
        case 230: 
        case 231: 
        case 234: 
        case 235: 
        case 238: 
        case 242: 
          {  return symbol(sym.IDENTIFIER);  }
        case 247: break;
        case 18: 
          {  return symbol(sym.TIDENTIFIER);  }
        case 248: break;
        case 62: 
          {  return symbol(sym.IDENTIFIER);  }
        case 249: break;
        case 109: 
          {  return symbol(sym.MINUSMINUS);  }
        case 250: break;
        case 110: 
          {  return symbol(sym.ARROW_RIGHT);  }
        case 251: break;
        case 131: 
          {  yybegin(YYINITIAL); return symbol(sym.SWING_RIGHT_ARROW);  }
        case 252: break;
        case 133: 
          {  return symbol(sym.EVENTUALLY);  }
        case 253: break;
        case 70: 
          {  yybegin(STRING); return symbol(sym.PLUS);  }
        case 254: break;
        case 130: 
          {  yybegin(YYINITIAL); return symbol(sym.IMPLIES);  }
        case 255: break;
        case 225: 
        case 228: 
          {  yybegin(USERTYPE); return symbol(sym.TYPE);  }
        case 256: break;
        case 84: 
          {  return emptyString();  }
        case 257: break;
        case 203: 
          {  return symbol(sym.FUNCTION);  }
        case 258: break;
        case 52: 
          {  yybegin(YYINITIAL); Symbol s = symbol(sym.STRING, string.toString()); string.setLength(0); return s;  }
        case 259: break;
        case 45: 
          {  return symbol(sym.QUESTION);  }
        case 260: break;
        case 115: 
          {  return symbol(sym.NOTEQUALS);  }
        case 261: break;
        case 118: 
          {  return symbol(sym.PLUSPLUS);  }
        case 262: break;
        case 244: 
        case 245: 
          {  yybegin(PREDICATE); return symbol(sym.PREDICATE);  }
        case 263: break;
        case 119: 
          {  string.append("{");  }
        case 264: break;
        case 137: 
        case 138: 
          {  return symbol(sym.NUM);  }
        case 265: break;
        case 49: 
          {  return symbol(sym.AT);  }
        case 266: break;
        case 47: 
          {  return symbol(sym.AND);  }
        case 267: break;
        case 42: 
          {  return symbol(sym.NOT);  }
        case 268: break;
        case 40: 
          {  return symbol(sym.LT);  }
        case 269: break;
        case 17: 
        case 19: 
          {  return symbol(sym.INT);  }
        case 270: break;
        case 13: 
          {  return symbol(sym.DIV);  }
        case 271: break;
        case 11: 
          {  /* ignore */  }
        case 272: break;
        case 9: 
          {  return symbol(sym.LF);  }
        case 273: break;
        case 20: 
          {  return symbol(sym.DOT);  }
        case 274: break;
        case 34: 
          {  return symbol(sym.GT);  }
        case 275: break;
        case 35: 
          {  return symbol(sym.COL);  }
        case 276: break;
        case 58: 
          {  return symbol(sym.LF);  }
        case 277: break;
        case 63: 
          {  return symbol(sym.LT);  }
        case 278: break;
        case 71: 
          {  return symbol(sym.DIV);  }
        case 279: break;
        case 72: 
          {  return symbol(sym.DOT);  }
        case 280: break;
        case 80: 
          {  return symbol(sym.LT);  }
        case 281: break;
        case 100: 
          {  return symbol(sym.OF);  }
        case 282: break;
        case 111: 
          {  return symbol(sym.GTE);  }
        case 283: break;
        case 112: 
          {  return symbol(sym.LTE);  }
        case 284: break;
        case 181: 
          {  return symbol(sym.FALSE);  }
        case 285: break;
        case 169: 
          {  return symbol(sym.ELSE);  }
        case 286: break;
        case 168: 
          {  return symbol(sym.CASE);  }
        case 287: break;
        case 165: 
          {  return symbol(sym.THIS);  }
        case 288: break;
        case 164: 
          {  return symbol(sym.TRUE);  }
        case 289: break;
        case 55: 
        case 57: 
          {  return symbol(sym.CHAR);  }
        case 290: break;
        case 48: 
          {  return symbol(sym.PLUS);  }
        case 291: break;
        case 44: 
          {  return symbol(sym.TUBE);  }
        case 292: break;
        case 14: 
          {  return symbol(sym.MULT);  }
        case 293: break;
        case 23: 
          {  return symbol(sym.COMMA);  }
        case 294: break;
        case 33: 
          {  return symbol(sym.MINUS);  }
        case 295: break;
        case 65: 
          {  return symbol(sym.TUBE);  }
        case 296: break;
        case 73: 
          {  return symbol(sym.MINUS);  }
        case 297: break;
        case 78: 
          {  return symbol(sym.MINUS);  }
        case 298: break;
        case 83: 
          {  return symbol(sym.PLUS);  }
        case 299: break;
        case 116: 
          {  return symbol(sym.OROR);  }
        case 300: break;
        case 136: 
          {  Symbol s = symbol(sym.LAMBDA); yypushback(yylength()); yybegin(LAMBDA); return s;  }
        case 301: break;
        case 76: 
          {  yybegin(YYINITIAL); return symbol(sym.END);  }
        case 302: break;
        case 51: 
        case 53: 
        case 54: 
          {  string.append(yytext());  }
        case 303: break;
        case 56: 
          {  yybegin(YYINITIAL);  }
        case 304: break;
        case 69: 
          {  Symbol s = symbol(sym.PLUS); yybegin(EMBEDED_EXPRESSION2); yypushback(yylength());  return s;  }
        case 305: break;
        case 12: 
          {  yybegin(STRING);  }
        case 306: break;
        case 185: 
          {  Symbol s = symbol(sym.END); yybegin(YYINITIAL); yypushback(yylength()); return s;  }
        case 307: break;
        case 122: 
          {  Symbol s = symbol(sym.END); yybegin(YYINITIAL); yypushback(yylength()); return s;  }
        case 308: break;
        case 74: 
          {  Symbol s = symbol(sym.RPAREN); yybegin(EMBEDED_EXPRESSION1); yypushback(yylength());  return s;  }
        case 309: break;
        case 121: 
          {  yybegin(EMBEDED_EXPRESSION1); yypushback(yytext().length()); Symbol s = symbol(sym.STRING, string.toString()); string.setLength(0); return s;  }
        case 310: break;
        case 8: 
        case 10: 
        case 15: 
        case 59: 
        case 60: 
        case 61: 
        case 67: 
        case 68: 
        case 75: 
        case 77: 
        case 79: 
        case 81: 
        case 82: 
          {  return symbol(-1, yytext());  }
        case 311: break;
        case 239: 
        case 241: 
          {  return symbol(sym.CHANNEL);  }
        case 312: break;
        case 200: 
          {  return symbol(sym.DECLARE);  }
        case 313: break;
        case 199: 
          {  return symbol(sym.DEFAULT);  }
        case 314: break;
        case 197: 
          {  return symbol(sym.PROCESS);  }
        case 315: break;
        case 190: 
          {  return symbol(sym.RETURN);  }
        case 316: break;
        case 188: 
          {  return symbol(sym.IMPORT);  }
        case 317: break;
        case 139: 
          {  return symbol(sym.INVDOT);  }
        case 318: break;
        case 50: 
          {  yybegin(CHAR);  }
        case 319: break;
        case 46: 
          {  return symbol(sym.DOLLAR);  }
        case 320: break;
        case 43: 
          {  return symbol(sym.MATCHES);  }
        case 321: break;
        case 41: 
          {  return symbol(sym.ASSIGN);  }
        case 322: break;
        case 39: 
          {  return symbol(sym.RSPAREN);  }
        case 323: break;
        case 38: 
          {  return symbol(sym.LSPAREN);  }
        case 324: break;
        case 37: 
          {  return symbol(sym.RCPAREN);  }
        case 325: break;
        case 21: 
          {  return symbol(sym.RPAREN);  }
        case 326: break;
        case 22: 
          {  return symbol(sym.LPAREN);  }
        case 327: break;
        case 36: 
          {  return symbol(sym.LCPAREN);  }
        case 328: break;
        case 64: 
          {  return symbol(sym.ASSIGN);  }
        case 329: break;
        case 66: 
          {  return symbol(sym.LPAREN);  }
        case 330: break;
        case 93: 
          {  return symbol(sym.DOTDOT);  }
        case 331: break;
        case 113: 
          {  return symbol(sym.IMPLIES);  }
        case 332: break;
        case 114: 
          {  return symbol(sym.EQUALS);  }
        case 333: break;
        case 117: 
          {  return symbol(sym.ANDAND);  }
        case 334: break;
        case 132: 
          {  return symbol(sym.ALWAYS);  }
        case 335: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            switch (yy_lexical_state) {
            case USERTYPE:
              {  yybegin(YYINITIAL); return symbol(sym.END);  }
            case 247: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
