
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 05 11:38:32 CET 2019
//----------------------------------------------------

package ini.parser;

import java.util.*;
import java.io.*;
import ini.*;
import ini.ast.*;
import ini.ast.Process;
//import ini.eval.function.*;
//import ini.eval.at.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 05 11:38:32 CET 2019
  */
public class IniParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IniParser() {super();}

  /** Constructor which sets the default scanner. */
  public IniParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\330\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\002\000\002\006\004\000\002\007\004\000" +
    "\002\007\002\000\002\010\005\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\016\004\000\002\017\013\000" +
    "\002\017\016\000\002\030\011\000\002\030\013\000\002" +
    "\032\006\000\002\031\003\000\002\031\003\000\002\031" +
    "\002\000\002\027\002\000\002\027\005\000\002\103\013" +
    "\000\002\012\012\000\002\012\012\000\002\013\003\000" +
    "\002\013\002\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\034\005\000\002\034" +
    "\003\000\002\035\005\000\002\035\003\000\002\062\005" +
    "\000\002\062\003\000\002\063\005\000\002\063\003\000" +
    "\002\065\005\000\002\065\003\000\002\066\005\000\002" +
    "\066\003\000\002\033\005\000\002\033\003\000\002\020" +
    "\003\000\002\020\002\000\002\021\005\000\002\021\003" +
    "\000\002\022\003\000\002\022\002\000\002\023\003\000" +
    "\002\023\006\000\002\023\004\000\002\023\007\000\002" +
    "\023\005\000\002\024\003\000\002\024\002\000\002\025" +
    "\005\000\002\025\003\000\002\026\003\000\002\026\005" +
    "\000\002\043\005\000\002\044\005\000\002\046\003\000" +
    "\002\076\003\000\002\076\003\000\002\045\003\000\002" +
    "\045\006\000\002\045\010\000\002\045\005\000\002\050" +
    "\003\000\002\050\005\000\002\047\003\000\002\061\007" +
    "\000\002\061\006\000\002\077\010\000\002\077\003\000" +
    "\002\077\005\000\002\115\006\000\002\115\003\000\002" +
    "\100\003\000\002\100\002\000\002\101\010\000\002\101" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\005\000" +
    "\002\122\007\000\002\052\012\000\002\052\010\000\002" +
    "\052\010\000\002\052\006\000\002\052\012\000\002\120" +
    "\005\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\005\000\002\074\005\000\002\074\004\000" +
    "\002\074\005\000\002\074\005\000\002\073\003\000\002" +
    "\073\005\000\002\073\005\000\002\073\004\000\002\073" +
    "\004\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\121\003\000\002" +
    "\121\003\000\002\121\005\000\002\121\005\000\002\121" +
    "\004\000\002\121\005\000\002\121\005\000\002\121\005" +
    "\000\002\121\005\000\002\121\005\000\002\121\005\000" +
    "\002\121\003\000\002\121\003\000\002\121\005\000\002" +
    "\121\005\000\002\121\004\000\002\121\005\000\002\121" +
    "\005\000\002\121\005\000\002\121\004\000\002\121\004" +
    "\000\002\121\005\000\002\051\013\000\002\051\006\000" +
    "\002\051\004\000\002\051\010\000\002\116\003\000\002" +
    "\116\002\000\002\117\005\000\002\117\003\000\002\104" +
    "\006\000\002\104\002\000\002\102\012\000\002\102\010" +
    "\000\002\056\004\000\002\056\004\000\002\054\007\000" +
    "\002\055\011\000\002\057\003\000\002\057\002\000\002" +
    "\060\006\000\002\060\003\000\002\041\003\000\002\041" +
    "\002\000\002\042\005\000\002\042\003\000\002\064\003" +
    "\000\002\064\003\000\002\070\007\000\002\070\013\000" +
    "\002\067\006\000\002\072\004\000\002\072\002\000\002" +
    "\053\004\000\002\053\003\000\002\071\003\000\002\071" +
    "\003\000\002\075\007\000\002\075\007\000\002\075\007" +
    "\000\002\105\010\000\002\105\005\000\002\106\006\000" +
    "\002\106\003\000\002\107\006\000\002\107\005\000\002" +
    "\111\003\000\002\111\003\000\002\110\003\000\002\110" +
    "\004\000\002\112\003\000\002\112\002\000\002\113\005" +
    "\000\002\113\003\000\002\114\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bc\000\064\002\ufffd\011\ufffd\015\ufffd\030\ufffd\037" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\060\006\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\070\ufffd\071\ufffd\072\ufffd\075\ufffd\076\ufffd" +
    "\077\ufffd\001\002\000\104\002\ufffe\011\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\030\ufffe\037\ufffe\040\ufffe\043\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\060\255\061\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\075\ufffe\076\ufffe\077\ufffe\001\002\000\004\002\u01be" +
    "\001\002\000\104\002\uffff\011\uffff\014\uffff\015\uffff\016" +
    "\uffff\030\uffff\037\uffff\040\uffff\043\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\065\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\075" +
    "\uffff\076\uffff\077\uffff\001\002\000\062\002\ufff8\011\020" +
    "\015\071\030\027\037\032\046\022\047\041\050\045\051" +
    "\066\052\063\053\015\054\072\055\057\056\064\062\056" +
    "\063\013\064\043\065\047\070\035\071\042\072\017\075" +
    "\055\076\021\077\052\001\002\000\010\002\uffa3\014\uffa3" +
    "\060\uffa3\001\002\000\006\002\ufff2\060\ufff2\001\002\000" +
    "\072\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\032\u01bc\034\uffb1\035\uffb1\036\uffb1\041\uffb1\042" +
    "\uffb1\056\uffb1\060\uffb1\001\002\000\004\054\u01b5\001\002" +
    "\000\072\002\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010" +
    "\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\032\uff92\034\uff92\035\uff92\036\uff92\041\uff92" +
    "\042\uff92\056\uff92\060\uff92\001\002\000\072\002\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\032\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\041\uff9a\042\uff9a\056\uff9a\060" +
    "\uff9a\001\002\000\062\002\uff9e\006\uff9e\007\uff9e\014\uff9e" +
    "\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\u01b3\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\100\032\uff9e" +
    "\033\101\034\uff9e\035\uff9e\036\uff9e\042\uff9e\056\uff9e\060" +
    "\uff9e\001\002\000\042\011\020\013\u01a0\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\u019e\055\057\056\064\065\047\071\042\001\002" +
    "\000\040\011\020\015\071\030\027\037\032\046\022\047" +
    "\041\050\045\051\066\052\063\053\015\054\072\055\057" +
    "\056\064\065\047\071\042\001\002\000\010\030\u018f\032" +
    "\u018e\054\uffe5\001\002\000\072\002\uff88\004\uff88\005\uff88" +
    "\006\uff88\007\uff88\010\uff88\012\uff88\013\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\032\uff88\034\uff88\035" +
    "\uff88\036\uff88\041\uff88\042\uff88\056\uff88\060\uff88\001\002" +
    "\000\072\002\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\032\uff94\034\uff94\035\uff94\036\uff94\041\uff94" +
    "\042\uff94\056\uff94\060\uff94\001\002\000\072\002\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\032\uff96" +
    "\034\uff96\035\uff96\036\uff96\041\uff96\042\uff96\056\uff96\060" +
    "\uff96\001\002\000\006\002\ufff4\060\ufff4\001\002\000\006" +
    "\002\ufff3\060\ufff3\001\002\000\040\011\020\015\071\030" +
    "\027\037\032\046\022\047\041\050\045\051\066\052\063" +
    "\053\015\054\072\055\057\056\064\065\047\071\042\001" +
    "\002\000\006\002\ufff0\060\ufff0\001\002\000\006\002\ufff6" +
    "\060\ufff6\001\002\000\040\011\020\015\071\030\027\037" +
    "\032\046\022\047\041\050\045\051\066\052\063\053\015" +
    "\054\072\055\057\056\064\065\047\071\042\001\002\000" +
    "\072\002\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\032\uff98\034\uff98\035\uff98\036\uff98\041\uff98\042" +
    "\uff98\056\uff98\060\uff98\001\002\000\006\002\uffee\060\uffee" +
    "\001\002\000\006\055\u0170\061\uffbf\001\002\000\006\002" +
    "\ufff1\060\ufff1\001\002\000\072\002\uff97\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\032\uff97\034\uff97\035" +
    "\uff97\036\uff97\041\uff97\042\uff97\056\uff97\060\uff97\001\002" +
    "\000\072\002\uff87\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\032\uff87\034\uff87\035\uff87\036\uff87\041\uff87" +
    "\042\uff87\056\uff87\060\uff87\001\002\000\072\002\uff89\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\032\uff89" +
    "\034\uff89\035\uff89\036\uff89\041\uff89\042\uff89\056\uff89\060" +
    "\uff89\001\002\000\072\002\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\032\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\041\uff9d\042\uff9d\056\uff9d\060\uff9d\001\002\000\004" +
    "\054\u0169\001\002\000\010\002\uffa2\014\uffa2\060\uffa2\001" +
    "\002\000\074\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\041" +
    "\uffb7\042\uffb7\056\uffb7\060\uffb7\061\uffb7\001\002\000\072" +
    "\002\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\032\uff9b\034\uff9b\035\uff9b\036\uff9b\041\uff9b\042\uff9b" +
    "\056\uff9b\060\uff9b\001\002\000\010\011\u010d\041\uffde\054" +
    "\u010c\001\002\000\072\002\uff93\004\uff93\005\uff93\006\uff93" +
    "\007\uff93\010\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\032\uff93\034\uff93\035\uff93\036" +
    "\uff93\041\uff93\042\uff93\056\uff93\060\uff93\001\002\000\006" +
    "\002\uffef\060\uffef\001\002\000\004\054\336\001\002\000" +
    "\072\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\032\uff95\034\uff95\035\uff95\036\uff95\041\uff95\042" +
    "\uff95\056\uff95\060\uff95\001\002\000\072\002\uff81\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\032\uff81\034" +
    "\uff81\035\uff81\036\uff81\041\uff81\042\uff81\056\uff81\060\uff81" +
    "\001\002\000\010\011\271\043\267\054\270\001\002\000" +
    "\004\052\266\001\002\000\072\002\uffab\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\257\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\032\uffab\034\uffab\035" +
    "\uffab\036\uffab\041\uffab\042\uffab\056\uffab\060\uffab\001\002" +
    "\000\072\002\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\032\uff99\034\uff99\035\uff99\036\uff99\041\uff99" +
    "\042\uff99\056\uff99\060\uff99\001\002\000\072\002\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\032\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\041\uff9c\042\uff9c\056\uff9c\060" +
    "\uff9c\001\002\000\054\002\uffa1\006\125\007\115\014\uffa1" +
    "\015\126\017\106\020\111\021\114\022\113\024\116\025" +
    "\117\026\120\027\122\030\124\032\110\034\112\035\121" +
    "\036\105\042\123\056\107\060\uffa1\001\002\000\072\002" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\032\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\042\uffaf\056" +
    "\uffaf\060\uffaf\001\002\000\040\011\020\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\057\056\064\065\047\071\042\001\002" +
    "\000\006\002\ufffd\060\006\001\002\000\074\002\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\056\uffb6\060" +
    "\uffb6\061\uffb6\001\002\000\004\002\ufffa\001\002\000\006" +
    "\002\ufff5\060\ufff5\001\002\000\044\011\020\015\071\016" +
    "\uff4d\030\027\037\032\046\022\047\041\050\045\051\066" +
    "\052\063\053\015\054\233\055\057\056\064\060\uff4d\065" +
    "\047\071\042\001\002\000\104\002\uffb5\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\073\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\056\uffb5\060\uffb5\001\002\000\042\011" +
    "\020\012\uff4d\015\071\030\027\037\032\046\022\047\041" +
    "\050\045\051\066\052\063\053\015\054\072\055\057\056" +
    "\064\065\047\071\042\001\002\000\052\005\uff4b\006\125" +
    "\007\115\012\uff4b\015\126\017\106\020\111\021\114\022" +
    "\113\024\116\025\117\026\120\027\122\030\124\032\110" +
    "\034\112\035\121\036\105\042\123\056\107\001\002\000" +
    "\004\012\227\001\002\000\012\005\102\012\uff4e\016\uff4e" +
    "\060\uff4e\001\002\000\076\002\uff9e\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\100\032\uff9e\033\101" +
    "\034\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e\056\uff9e\060" +
    "\uff9e\001\002\000\072\002\uff51\004\uff51\005\uff51\006\uff51" +
    "\007\uff51\010\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016" +
    "\uff51\017\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51" +
    "\026\uff51\027\uff51\030\uff51\032\uff51\034\uff51\035\uff51\036" +
    "\uff51\041\uff51\042\uff51\056\uff51\060\uff51\001\002\000\072" +
    "\002\uff52\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52\012" +
    "\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52" +
    "\021\uff52\022\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030" +
    "\uff52\032\uff52\034\uff52\035\uff52\036\uff52\041\uff52\042\uff52" +
    "\056\uff52\060\uff52\001\002\000\042\011\ufffd\015\ufffd\030" +
    "\ufffd\037\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060\006\065\ufffd\071" +
    "\ufffd\001\002\000\040\011\020\015\071\030\027\037\032" +
    "\046\022\047\041\050\045\051\066\052\063\053\015\054" +
    "\072\055\057\056\064\065\047\071\042\001\002\000\056" +
    "\005\uff4c\006\125\007\115\012\uff4c\015\126\016\uff4c\017" +
    "\106\020\111\021\114\022\113\024\116\025\117\026\120" +
    "\027\122\030\124\032\110\034\112\035\121\036\105\042" +
    "\123\056\107\060\uff4c\001\002\000\040\011\020\015\071" +
    "\030\027\037\032\046\022\047\041\050\045\051\066\052" +
    "\063\053\015\054\072\055\057\056\064\065\047\071\042" +
    "\001\002\000\040\011\020\015\071\030\027\037\032\046" +
    "\022\047\041\050\045\051\066\052\063\053\015\054\072" +
    "\055\057\056\064\065\047\071\042\001\002\000\040\011" +
    "\020\015\071\030\027\037\032\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\072\055\057\056\064\065" +
    "\047\071\042\001\002\000\040\011\020\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\057\056\064\065\047\071\042\001\002" +
    "\000\040\011\020\015\071\030\027\037\032\046\022\047" +
    "\041\050\045\051\066\052\063\053\015\054\072\055\057" +
    "\056\064\065\047\071\042\001\002\000\040\011\020\015" +
    "\071\030\027\037\032\046\022\047\041\050\045\051\066" +
    "\052\063\053\015\054\072\055\057\056\064\065\047\071" +
    "\042\001\002\000\040\011\020\015\071\030\027\037\032" +
    "\046\022\047\041\050\045\051\066\052\063\053\015\054" +
    "\072\055\057\056\064\065\047\071\042\001\002\000\040" +
    "\011\020\015\071\030\027\037\032\046\022\047\041\050" +
    "\045\051\066\052\063\053\015\054\072\055\057\056\064" +
    "\065\047\071\042\001\002\000\004\054\176\001\002\000" +
    "\040\011\020\015\071\030\027\037\032\046\022\047\041" +
    "\050\045\051\066\052\063\053\015\054\072\055\057\056" +
    "\064\065\047\071\042\001\002\000\040\011\020\015\071" +
    "\030\027\037\032\046\022\047\041\050\045\051\066\052" +
    "\063\053\015\054\072\055\057\056\064\065\047\071\042" +
    "\001\002\000\040\011\020\015\071\030\027\037\032\046" +
    "\022\047\041\050\045\051\066\052\063\053\015\054\072" +
    "\055\057\056\064\065\047\071\042\001\002\000\040\011" +
    "\020\015\071\030\027\037\032\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\072\055\057\056\064\065" +
    "\047\071\042\001\002\000\040\011\020\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\057\056\064\065\047\071\042\001\002" +
    "\000\010\011\143\054\141\055\136\001\002\000\040\011" +
    "\020\015\071\030\027\037\032\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\072\055\057\056\064\065" +
    "\047\071\042\001\002\000\004\054\134\001\002\000\040" +
    "\011\020\015\071\030\027\037\032\046\022\047\041\050" +
    "\045\051\066\052\063\053\015\054\072\055\057\056\064" +
    "\065\047\071\042\001\002\000\052\006\125\007\115\010" +
    "\130\015\126\016\131\017\106\020\111\021\114\022\113" +
    "\024\116\025\117\026\120\027\122\030\124\032\110\034" +
    "\112\035\121\036\105\042\123\056\107\001\002\000\040" +
    "\011\020\015\071\030\027\037\032\046\022\047\041\050" +
    "\045\051\066\052\063\053\015\054\072\055\057\056\064" +
    "\065\047\071\042\001\002\000\102\002\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\056\uffb4\060\uffb4\001\002\000\050\006\125" +
    "\007\115\015\126\016\133\017\106\020\111\021\114\022" +
    "\113\024\116\025\117\026\120\027\122\030\124\032\110" +
    "\034\112\035\121\036\105\042\123\056\107\001\002\000" +
    "\102\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\056\uffb3\060\uffb3" +
    "\001\002\000\102\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\056" +
    "\uffb2\060\uffb2\001\002\000\072\002\uff85\004\uff85\005\uff85" +
    "\006\125\007\115\010\uff85\012\uff85\013\uff85\014\uff85\015" +
    "\126\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\024\uff85" +
    "\025\uff85\026\120\027\122\030\uff85\032\uff85\034\uff85\035" +
    "\uff85\036\uff85\041\uff85\042\uff85\056\uff85\060\uff85\001\002" +
    "\000\074\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\157\012\uffc5\013\uffc5\014\uffc5\015\162\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\041\uffc5\042\uffc5\056\uffc5\060\uffc5\001\002\000\072\002" +
    "\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\012\uff75" +
    "\013\uff75\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021" +
    "\uff75\022\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75" +
    "\032\uff75\034\uff75\035\uff75\036\uff75\041\uff75\042\uff75\056" +
    "\uff75\060\uff75\001\002\000\072\002\uffa8\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8" +
    "\025\uffa8\026\154\027\uffa8\030\uffa8\032\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\041\153\042\uffa8\056\uffa8\060\uffa8\001\002" +
    "\000\004\011\073\001\002\000\072\002\uff76\004\uff76\005" +
    "\uff76\006\uff76\007\uff76\010\uff76\012\uff76\013\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\032\uff76\034\uff76" +
    "\035\uff76\036\uff76\041\uff76\042\uff76\056\uff76\060\uff76\001" +
    "\002\000\006\011\143\055\144\001\002\000\074\002\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\157\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5" +
    "\056\uffc5\060\uffc5\001\002\000\014\005\uffc8\012\uffc8\016" +
    "\uffc8\026\154\041\153\001\002\000\006\005\147\012\150" +
    "\001\002\000\006\011\143\055\144\001\002\000\004\041" +
    "\151\001\002\000\006\011\143\055\144\001\002\000\072" +
    "\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\154\027\uffc2\030" +
    "\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2" +
    "\056\uffc2\060\uffc2\001\002\000\006\011\143\055\144\001" +
    "\002\000\072\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\041" +
    "\uffc3\042\uffc3\056\uffc3\060\uffc3\001\002\000\072\002\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\024\uffc1\025\uffc1\026\154\027\uffc1\030\uffc1\032" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\056\uffc1" +
    "\060\uffc1\001\002\000\014\005\uffc9\012\uffc9\016\uffc9\026" +
    "\154\041\153\001\002\000\006\011\143\055\144\001\002" +
    "\000\006\005\147\012\161\001\002\000\072\002\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\056\uffc4\060" +
    "\uffc4\001\002\000\042\011\020\015\071\016\uff59\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\057\056\064\065\047\071\042\001\002" +
    "\000\052\005\uff57\006\125\007\115\015\126\016\uff57\017" +
    "\106\020\111\021\114\022\113\024\116\025\117\026\120" +
    "\027\122\030\124\032\110\034\112\035\121\036\105\042" +
    "\123\056\107\001\002\000\006\005\167\016\uff5a\001\002" +
    "\000\004\016\166\001\002\000\072\002\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\041\uffa9\042\uffa9\056\uffa9\060\uffa9\001" +
    "\002\000\040\011\020\015\071\030\027\037\032\046\022" +
    "\047\041\050\045\051\066\052\063\053\015\054\072\055" +
    "\057\056\064\065\047\071\042\001\002\000\052\005\uff58" +
    "\006\125\007\115\015\126\016\uff58\017\106\020\111\021" +
    "\114\022\113\024\116\025\117\026\120\027\122\030\124" +
    "\032\110\034\112\035\121\036\105\042\123\056\107\001" +
    "\002\000\072\002\uff82\004\uff82\005\uff82\006\125\007\115" +
    "\010\uff82\012\uff82\013\uff82\014\uff82\015\126\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\024\uff82\025\uff82\026\uff82" +
    "\027\uff82\030\uff82\032\uff82\034\uff82\035\uff82\036\uff82\041" +
    "\uff82\042\uff82\056\uff82\060\uff82\001\002\000\072\002\uff80" +
    "\004\uff80\005\uff80\006\125\007\115\010\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\126\016\uff80\017\106\020\111\021\114" +
    "\022\113\024\116\025\117\026\120\027\122\030\124\032" +
    "\110\034\uff80\035\uff80\036\uff80\041\uff80\042\123\056\107" +
    "\060\uff80\001\002\000\072\002\uff83\004\uff83\005\uff83\006" +
    "\125\007\115\010\uff83\012\uff83\013\uff83\014\uff83\015\126" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\032\uff83\034\uff83\035\uff83" +
    "\036\uff83\041\uff83\042\uff83\056\uff83\060\uff83\001\002\000" +
    "\072\002\uff7b\004\uff7b\005\uff7b\006\125\007\115\010\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\126\016\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\024\uff7b\025\uff7b\026\120\027\122" +
    "\030\124\032\110\034\uff7b\035\uff7b\036\uff7b\041\uff7b\042" +
    "\uff7b\056\uff7b\060\uff7b\001\002\000\072\002\uff7c\004\uff7c" +
    "\005\uff7c\006\125\007\115\010\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\126\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\024\uff7c\025\uff7c\026\120\027\122\030\124\032\110\034" +
    "\uff7c\035\uff7c\036\uff7c\041\uff7c\042\uff7c\056\uff7c\060\uff7c" +
    "\001\002\000\004\011\177\001\002\000\042\011\020\012" +
    "\uff4d\015\071\030\027\037\032\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\072\055\057\056\064\065" +
    "\047\071\042\001\002\000\004\012\201\001\002\000\072" +
    "\002\uff55\004\202\005\uff55\006\uff55\007\uff55\010\uff55\012" +
    "\uff55\013\uff55\014\uff55\015\uff55\016\uff55\017\uff55\020\uff55" +
    "\021\uff55\022\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030" +
    "\uff55\032\uff55\034\uff55\035\uff55\036\uff55\041\uff55\042\uff55" +
    "\056\uff55\060\uff55\001\002\000\004\015\204\001\002\000" +
    "\072\002\uff4f\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f" +
    "\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020" +
    "\uff4f\021\uff4f\022\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f" +
    "\030\uff4f\032\uff4f\034\uff4f\035\uff4f\036\uff4f\041\uff4f\042" +
    "\uff4f\056\uff4f\060\uff4f\001\002\000\004\054\207\001\002" +
    "\000\006\005\212\016\213\001\002\000\006\005\uff47\016" +
    "\uff47\001\002\000\004\023\210\001\002\000\040\011\020" +
    "\015\071\030\027\037\032\046\022\047\041\050\045\051" +
    "\066\052\063\053\015\054\072\055\057\056\064\065\047" +
    "\071\042\001\002\000\052\005\uffb9\006\125\007\115\015" +
    "\126\016\uffb9\017\106\020\111\021\114\022\113\024\116" +
    "\025\117\026\120\027\122\030\124\032\110\034\112\035" +
    "\121\036\105\042\123\056\107\001\002\000\004\054\207" +
    "\001\002\000\072\002\uff56\004\uff56\005\uff56\006\uff56\007" +
    "\uff56\010\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016\uff56" +
    "\017\uff56\020\uff56\021\uff56\022\uff56\024\uff56\025\uff56\026" +
    "\uff56\027\uff56\030\uff56\032\uff56\034\uff56\035\uff56\036\uff56" +
    "\041\uff56\042\uff56\056\uff56\060\uff56\001\002\000\006\005" +
    "\uff48\016\uff48\001\002\000\072\002\uff77\004\uff77\005\uff77" +
    "\006\125\007\115\010\uff77\012\uff77\013\uff77\014\uff77\015" +
    "\126\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\024\uff77" +
    "\025\uff77\026\120\027\122\030\124\032\110\034\uff77\035" +
    "\uff77\036\uff77\041\uff77\042\uff77\056\uff77\060\uff77\001\002" +
    "\000\072\002\uff78\004\uff78\005\uff78\006\125\007\115\010" +
    "\uff78\012\uff78\013\uff78\014\uff78\015\126\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\024\uff78\025\uff78\026\120\027" +
    "\122\030\124\032\110\034\uff78\035\uff78\036\uff78\041\uff78" +
    "\042\uff78\056\uff78\060\uff78\001\002\000\072\002\uff7f\004" +
    "\uff7f\005\uff7f\006\125\007\115\010\uff7f\012\uff7f\013\uff7f" +
    "\014\uff7f\015\126\016\uff7f\017\106\020\111\021\114\022" +
    "\113\024\116\025\117\026\120\027\122\030\124\032\110" +
    "\034\uff7f\035\121\036\uff7f\041\uff7f\042\123\056\107\060" +
    "\uff7f\001\002\000\072\002\uff79\004\uff79\005\uff79\006\125" +
    "\007\115\010\uff79\012\uff79\013\uff79\014\uff79\015\126\016" +
    "\uff79\017\uff79\020\uff79\021\uff79\022\uff79\024\uff79\025\uff79" +
    "\026\120\027\122\030\124\032\110\034\uff79\035\uff79\036" +
    "\uff79\041\uff79\042\uff79\056\uff79\060\uff79\001\002\000\072" +
    "\002\uff86\004\uff86\005\uff86\006\125\007\115\010\uff86\012" +
    "\uff86\013\uff86\014\uff86\015\126\016\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\024\uff86\025\uff86\026\120\027\122\030" +
    "\uff86\032\uff86\034\uff86\035\uff86\036\uff86\041\uff86\042\uff86" +
    "\056\uff86\060\uff86\001\002\000\050\004\223\006\125\007" +
    "\115\015\126\017\106\020\111\021\114\022\113\024\116" +
    "\025\117\026\120\027\122\030\124\032\110\034\112\035" +
    "\121\036\105\042\123\056\107\001\002\000\040\011\020" +
    "\015\071\030\027\037\032\046\022\047\041\050\045\051" +
    "\066\052\063\053\015\054\072\055\057\056\064\065\047" +
    "\071\042\001\002\000\072\002\uff90\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\032\uff90\034\uff90\035\uff90" +
    "\036\uff90\041\uff90\042\uff90\056\uff90\060\uff90\001\002\000" +
    "\072\002\uff7a\004\uff7a\005\uff7a\006\125\007\115\010\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\126\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\024\uff7a\025\uff7a\026\120\027\122" +
    "\030\124\032\110\034\uff7a\035\uff7a\036\uff7a\041\uff7a\042" +
    "\uff7a\056\uff7a\060\uff7a\001\002\000\072\002\uff8a\004\uff8a" +
    "\005\uff8a\006\125\007\115\010\uff8a\012\uff8a\013\uff8a\014" +
    "\uff8a\015\126\016\uff8a\017\106\020\111\021\114\022\113" +
    "\024\116\025\117\026\120\027\122\030\124\032\110\034" +
    "\112\035\121\036\uff8a\041\uff8a\042\123\056\107\060\uff8a" +
    "\001\002\000\072\002\uff55\004\202\005\uff55\006\uff55\007" +
    "\uff55\010\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016\uff55" +
    "\017\uff55\020\uff55\021\uff55\022\uff55\024\uff55\025\uff55\026" +
    "\uff55\027\uff55\030\uff55\032\uff55\034\uff55\035\uff55\036\uff55" +
    "\041\uff55\042\uff55\056\uff55\060\uff55\001\002\000\072\002" +
    "\uff50\004\uff50\005\uff50\006\uff50\007\uff50\010\uff50\012\uff50" +
    "\013\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021" +
    "\uff50\022\uff50\024\uff50\025\uff50\026\uff50\027\uff50\030\uff50" +
    "\032\uff50\034\uff50\035\uff50\036\uff50\041\uff50\042\uff50\056" +
    "\uff50\060\uff50\001\002\000\056\005\uff4b\006\125\007\115" +
    "\010\247\015\126\016\uff4b\017\106\020\111\021\114\022" +
    "\113\024\116\025\117\026\120\027\122\030\124\032\110" +
    "\034\112\035\121\036\105\042\123\056\107\060\uff4b\001" +
    "\002\000\006\005\241\016\242\001\002\000\066\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\073\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\237\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\042\uffb5\056\uffb5\060\uffb5\001\002" +
    "\000\006\016\ufffd\060\006\001\002\000\004\016\236\001" +
    "\002\000\074\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\032\uffad\034\uffad\035\uffad\036\uffad\040" +
    "\uffad\041\uffad\042\uffad\056\uffad\060\uffad\001\002\000\040" +
    "\011\020\015\071\030\027\037\032\046\022\047\041\050" +
    "\045\051\066\052\063\053\015\054\072\055\057\056\064" +
    "\065\047\071\042\001\002\000\054\005\uffa4\006\125\007" +
    "\115\015\126\016\uffa4\017\106\020\111\021\114\022\113" +
    "\024\116\025\117\026\120\027\122\030\124\032\110\034" +
    "\112\035\121\036\105\042\123\056\107\060\uffa4\001\002" +
    "\000\006\054\ufffd\060\006\001\002\000\072\002\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\056\uffaa\060" +
    "\uffaa\001\002\000\004\054\244\001\002\000\004\023\245" +
    "\001\002\000\040\011\020\015\071\030\027\037\032\046" +
    "\022\047\041\050\045\051\066\052\063\053\015\054\072" +
    "\055\057\056\064\065\047\071\042\001\002\000\054\005" +
    "\uffa5\006\125\007\115\015\126\016\uffa5\017\106\020\111" +
    "\021\114\022\113\024\116\025\117\026\120\027\122\030" +
    "\124\032\110\034\112\035\121\036\105\042\123\056\107" +
    "\060\uffa5\001\002\000\040\011\020\015\071\030\027\037" +
    "\032\046\022\047\041\050\045\051\066\052\063\053\015" +
    "\054\072\055\057\056\064\065\047\071\042\001\002\000" +
    "\050\006\125\007\115\015\126\016\251\017\106\020\111" +
    "\021\114\022\113\024\116\025\117\026\120\027\122\030" +
    "\124\032\110\034\112\035\121\036\105\042\123\056\107" +
    "\001\002\000\074\002\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\032\uffae\034\uffae\035\uffae\036\uffae" +
    "\040\uffae\041\uffae\042\uffae\056\uffae\060\uffae\001\002\000" +
    "\064\002\ufffe\011\020\015\071\030\027\037\032\046\022" +
    "\047\041\050\045\051\066\052\063\053\015\054\072\055" +
    "\057\056\064\060\255\062\056\063\013\064\043\065\047" +
    "\070\035\071\042\072\017\075\055\076\021\077\052\001" +
    "\002\000\004\002\ufff9\001\002\000\006\002\ufff7\060\ufff7" +
    "\001\002\000\104\002\000\011\000\014\000\015\000\016" +
    "\000\030\000\037\000\040\000\043\000\046\000\047\000" +
    "\050\000\051\000\052\000\053\000\054\000\055\000\056" +
    "\000\057\000\060\000\061\000\062\000\063\000\064\000" +
    "\065\000\067\000\070\000\071\000\072\000\073\000\075" +
    "\000\076\000\077\000\001\002\000\072\002\uff7d\004\uff7d" +
    "\005\uff7d\006\125\007\115\010\uff7d\012\uff7d\013\uff7d\014" +
    "\uff7d\015\126\016\uff7d\017\106\020\111\021\114\022\113" +
    "\024\116\025\117\026\120\027\122\030\124\032\110\034" +
    "\uff7d\035\uff7d\036\uff7d\041\uff7d\042\123\056\uff7d\060\uff7d" +
    "\001\002\000\010\016\ufffd\054\ufffd\060\006\001\002\000" +
    "\010\016\uffa6\054\262\060\uffa6\001\002\000\010\005\241" +
    "\016\uffa7\060\uffa7\001\002\000\004\023\237\001\002\000" +
    "\006\016\ufffd\060\006\001\002\000\004\016\265\001\002" +
    "\000\072\002\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\032\uffac\034\uffac\035\uffac\036\uffac\041\uffac" +
    "\042\uffac\056\uffac\060\uffac\001\002\000\006\002\uffed\060" +
    "\uffed\001\002\000\004\054\324\001\002\000\006\011\ufffb" +
    "\065\276\001\002\000\010\012\uffbf\055\272\065\uffbf\001" +
    "\002\000\014\005\uffbc\012\uffbc\017\313\061\uffbc\065\uffbc" +
    "\001\002\000\012\005\311\012\uffc0\061\uffc0\065\uffc0\001" +
    "\002\000\012\005\uffbd\012\uffbd\061\uffbd\065\uffbd\001\002" +
    "\000\006\012\ufffb\065\276\001\002\000\006\011\ufffc\012" +
    "\ufffc\001\002\000\004\012\300\001\002\000\004\054\301" +
    "\001\002\000\004\011\302\001\002\000\010\011\143\012" +
    "\uffca\055\144\001\002\000\004\012\305\001\002\000\010" +
    "\005\147\012\uffcb\016\uffcb\001\002\000\004\041\306\001" +
    "\002\000\006\011\143\055\144\001\002\000\014\002\uff55" +
    "\004\202\026\154\041\153\060\uff55\001\002\000\006\002" +
    "\uffeb\060\uffeb\001\002\000\004\055\272\001\002\000\012" +
    "\005\uffbe\012\uffbe\061\uffbe\065\uffbe\001\002\000\004\055" +
    "\314\001\002\000\012\005\uffbb\012\uffbb\061\uffbb\065\uffbb" +
    "\001\002\000\004\011\316\001\002\000\010\011\143\012" +
    "\uffca\055\144\001\002\000\004\012\320\001\002\000\004" +
    "\041\321\001\002\000\006\011\143\055\144\001\002\000" +
    "\014\002\uff55\004\202\026\154\041\153\060\uff55\001\002" +
    "\000\006\002\uffec\060\uffec\001\002\000\006\011\uffe4\015" +
    "\326\001\002\000\004\011\331\001\002\000\010\011\143" +
    "\016\uffca\055\144\001\002\000\004\016\330\001\002\000" +
    "\004\011\uffe3\001\002\000\010\011\143\012\uffca\055\144" +
    "\001\002\000\004\012\333\001\002\000\004\041\334\001" +
    "\002\000\004\052\335\001\002\000\006\002\uffe2\060\uffe2" +
    "\001\002\000\026\011\350\030\340\037\347\046\343\047" +
    "\342\050\045\051\066\054\346\100\337\101\341\001\002" +
    "\000\026\011\350\030\340\037\347\046\343\047\342\050" +
    "\045\051\066\054\346\100\337\101\341\001\002\000\026" +
    "\011\350\030\340\037\347\046\343\047\342\050\045\051" +
    "\066\054\346\100\337\101\341\001\002\000\026\011\350" +
    "\030\340\037\347\046\343\047\342\050\045\051\066\054" +
    "\346\100\337\101\341\001\002\000\040\012\uff69\017\uff69" +
    "\020\uff69\021\uff69\022\uff69\024\uff69\025\uff69\026\uff69\027" +
    "\uff69\030\uff69\032\uff69\034\uff69\035\uff69\041\uff69\061\uff69" +
    "\001\002\000\040\012\uff68\017\uff68\020\uff68\021\uff68\022" +
    "\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\032\uff68" +
    "\034\uff68\035\uff68\041\uff68\061\uff68\001\002\000\036\017" +
    "\367\020\357\021\355\022\363\024\366\025\354\026\360" +
    "\027\362\030\352\032\361\034\353\035\356\041\364\061" +
    "\u0106\001\002\000\040\012\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\032" +
    "\uff73\034\uff73\035\uff73\041\uff73\061\uff73\001\002\000\040" +
    "\012\uff74\017\uff74\020\uff74\021\uff74\022\uff74\024\uff74\025" +
    "\uff74\026\uff74\027\uff74\030\uff74\032\uff74\034\uff74\035\uff74" +
    "\041\uff74\061\uff74\001\002\000\026\011\350\030\340\037" +
    "\347\046\343\047\342\050\045\051\066\054\346\100\337" +
    "\101\341\001\002\000\026\011\350\030\340\037\347\046" +
    "\343\047\342\050\045\051\066\054\346\100\337\101\341" +
    "\001\002\000\036\012\365\017\367\020\357\021\355\022" +
    "\363\024\366\025\354\026\360\027\362\030\352\032\361" +
    "\034\353\035\356\041\364\001\002\000\026\011\350\030" +
    "\340\037\347\046\343\047\342\050\045\051\066\054\346" +
    "\100\337\101\341\001\002\000\026\011\350\030\340\037" +
    "\347\046\343\047\342\050\045\051\066\054\346\100\337" +
    "\101\341\001\002\000\026\011\350\030\340\037\347\046" +
    "\343\047\342\050\045\051\066\054\346\100\337\101\341" +
    "\001\002\000\026\011\350\030\340\037\347\046\343\047" +
    "\342\050\045\051\066\054\346\100\337\101\341\001\002" +
    "\000\026\011\350\030\340\037\347\046\343\047\342\050" +
    "\045\051\066\054\346\100\337\101\341\001\002\000\026" +
    "\011\350\030\340\037\347\046\343\047\342\050\045\051" +
    "\066\054\346\100\337\101\341\001\002\000\026\011\350" +
    "\030\340\037\347\046\343\047\342\050\045\051\066\054" +
    "\346\100\337\101\341\001\002\000\026\011\350\030\340" +
    "\037\347\046\343\047\342\050\045\051\066\054\346\100" +
    "\337\101\341\001\002\000\026\011\350\030\340\037\347" +
    "\046\343\047\342\050\045\051\066\054\346\100\337\101" +
    "\341\001\002\000\026\011\350\030\340\037\347\046\343" +
    "\047\342\050\045\051\066\054\346\100\337\101\341\001" +
    "\002\000\026\011\350\030\340\037\347\046\343\047\342" +
    "\050\045\051\066\054\346\100\337\101\341\001\002\000" +
    "\040\012\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\024\uff5f" +
    "\025\uff5f\026\uff5f\027\uff5f\030\uff5f\032\uff5f\034\uff5f\035" +
    "\uff5f\041\uff5f\061\uff5f\001\002\000\026\011\350\030\340" +
    "\037\347\046\343\047\342\050\045\051\066\054\346\100" +
    "\337\101\341\001\002\000\026\011\350\030\340\037\347" +
    "\046\343\047\342\050\045\051\066\054\346\100\337\101" +
    "\341\001\002\000\040\012\uff6d\017\uff6d\020\uff6d\021\uff6d" +
    "\022\uff6d\024\uff6d\025\uff6d\026\360\027\362\030\352\032" +
    "\361\034\uff6d\035\uff6d\041\uff6d\061\uff6d\001\002\000\040" +
    "\012\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\024\uff6f\025" +
    "\uff6f\026\360\027\362\030\352\032\361\034\uff6f\035\uff6f" +
    "\041\uff6f\061\uff6f\001\002\000\040\012\uff62\017\367\020" +
    "\357\021\355\022\363\024\366\025\354\026\360\027\362" +
    "\030\352\032\361\034\353\035\356\041\uff62\061\uff62\001" +
    "\002\000\040\012\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b" +
    "\024\uff6b\025\uff6b\026\360\027\362\030\352\032\361\034" +
    "\uff6b\035\uff6b\041\uff6b\061\uff6b\001\002\000\040\012\uff63" +
    "\017\uff63\020\uff63\021\uff63\022\uff63\024\uff63\025\uff63\026" +
    "\uff63\027\uff63\030\uff63\032\uff63\034\uff63\035\uff63\041\uff63" +
    "\061\uff63\001\002\000\040\012\uff67\017\uff67\020\uff67\021" +
    "\uff67\022\uff67\024\uff67\025\uff67\026\360\027\362\030\uff67" +
    "\032\uff67\034\uff67\035\uff67\041\uff67\061\uff67\001\002\000" +
    "\040\012\uff64\017\uff64\020\uff64\021\uff64\022\uff64\024\uff64" +
    "\025\uff64\026\uff64\027\uff64\030\uff64\032\uff64\034\uff64\035" +
    "\uff64\041\uff64\061\uff64\001\002\000\040\012\uff6c\017\uff6c" +
    "\020\uff6c\021\uff6c\022\uff6c\024\uff6c\025\uff6c\026\360\027" +
    "\362\030\352\032\361\034\uff6c\035\uff6c\041\uff6c\061\uff6c" +
    "\001\002\000\040\012\uff72\017\367\020\357\021\355\022" +
    "\363\024\366\025\354\026\360\027\362\030\352\032\361" +
    "\034\uff72\035\uff72\041\uff72\061\uff72\001\002\000\040\012" +
    "\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a" +
    "\026\360\027\362\030\352\032\361\034\uff6a\035\uff6a\041" +
    "\uff6a\061\uff6a\001\002\000\040\012\uff6e\017\uff6e\020\uff6e" +
    "\021\uff6e\022\uff6e\024\uff6e\025\uff6e\026\360\027\362\030" +
    "\352\032\361\034\uff6e\035\uff6e\041\uff6e\061\uff6e\001\002" +
    "\000\040\012\uff71\017\367\020\357\021\355\022\363\024" +
    "\366\025\354\026\360\027\362\030\352\032\361\034\uff71" +
    "\035\356\041\uff71\061\uff71\001\002\000\040\012\uff66\017" +
    "\uff66\020\uff66\021\uff66\022\uff66\024\uff66\025\uff66\026\360" +
    "\027\362\030\uff66\032\uff66\034\uff66\035\uff66\041\uff66\061" +
    "\uff66\001\002\000\040\012\uff70\017\367\020\357\021\355" +
    "\022\363\024\366\025\354\026\360\027\362\030\352\032" +
    "\361\034\uff70\035\uff70\041\uff70\061\uff70\001\002\000\006" +
    "\002\uffe8\060\uffe8\001\002\000\040\012\uff60\017\uff60\020" +
    "\uff60\021\uff60\022\uff60\024\uff60\025\uff60\026\uff60\027\uff60" +
    "\030\uff60\032\uff60\034\uff60\035\uff60\041\uff60\061\uff60\001" +
    "\002\000\040\012\uff65\017\uff65\020\uff65\021\uff65\022\uff65" +
    "\024\uff65\025\uff65\026\360\027\362\030\uff65\032\uff65\034" +
    "\uff65\035\uff65\041\uff65\061\uff65\001\002\000\040\012\uff61" +
    "\017\uff61\020\uff61\021\uff61\022\uff61\024\uff61\025\uff61\026" +
    "\uff61\027\uff61\030\uff61\032\uff61\034\uff61\035\uff61\041\uff61" +
    "\061\uff61\001\002\000\010\005\u0167\012\uffdf\041\uffdf\001" +
    "\002\000\004\041\u0162\001\002\000\012\005\uffda\012\uffda" +
    "\023\u0160\041\uffda\001\002\000\006\012\uffde\054\u010c\001" +
    "\002\000\010\005\uffdc\012\uffdc\041\uffdc\001\002\000\004" +
    "\012\u0110\001\002\000\006\041\u0112\045\u0111\001\002\000" +
    "\004\013\u0121\001\002\000\042\011\020\013\u0114\015\071" +
    "\030\027\037\032\046\022\047\041\050\045\051\066\052" +
    "\063\053\015\054\072\055\057\056\064\065\047\071\042" +
    "\001\002\000\072\002\uff8d\004\uff8d\005\uff8d\006\125\007" +
    "\115\010\uff8d\012\uff8d\013\uff8d\014\uff8d\015\126\016\uff8d" +
    "\017\106\020\111\021\114\022\113\024\116\025\117\026" +
    "\120\027\122\030\124\032\110\034\112\035\121\036\105" +
    "\041\uff8d\042\123\056\107\060\uff8d\001\002\000\050\011" +
    "\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\060\006\065\ufffd\067\ufffd\071\ufffd\072\ufffd\001\002" +
    "\000\046\011\020\014\uffd8\015\071\030\027\037\032\046" +
    "\022\047\041\050\045\051\066\052\063\053\015\054\072" +
    "\055\057\056\064\065\047\067\u011b\071\042\072\017\001" +
    "\002\000\004\014\u0117\001\002\000\072\002\uff8f\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\041\uff8f\042\uff8f\056\uff8f\060\uff8f" +
    "\001\002\000\006\014\uff9f\060\uff9f\001\002\000\006\014" +
    "\uffa0\060\uffa0\001\002\000\006\014\uffd6\060\uffd6\001\002" +
    "\000\044\011\020\014\uff3e\015\071\030\027\037\032\046" +
    "\022\047\041\050\045\051\066\052\063\053\015\054\072" +
    "\055\057\056\064\060\uff3e\065\047\071\042\001\002\000" +
    "\006\014\ufffd\060\006\001\002\000\050\011\020\014\ufffe" +
    "\015\071\030\027\037\032\046\022\047\041\050\045\051" +
    "\066\052\063\053\015\054\072\055\057\056\064\060\255" +
    "\065\047\067\u011b\071\042\072\017\001\002\000\004\014" +
    "\uffd9\001\002\000\006\014\uffd7\060\uffd7\001\002\000\052" +
    "\006\125\007\115\014\uff3f\015\126\017\106\020\111\021" +
    "\114\022\113\024\116\025\117\026\120\027\122\030\124" +
    "\032\110\034\112\035\121\036\105\042\123\056\107\060" +
    "\uff3f\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd" +
    "\037\ufffd\043\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\006" +
    "\065\ufffd\071\ufffd\001\002\000\046\011\020\014\uffd4\015" +
    "\071\030\027\037\032\043\u012c\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\u0130\055\057\056\064\057" +
    "\u0129\065\047\071\042\001\002\000\004\014\u0124\001\002" +
    "\000\072\002\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\032\uff8b\034\uff8b\035\uff8b\036\uff8b\041\uff8b" +
    "\042\uff8b\056\uff8b\060\uff8b\001\002\000\006\014\uff46\060" +
    "\uff46\001\002\000\004\013\u015d\001\002\000\006\014\ufffd" +
    "\060\006\001\002\000\006\005\u014c\066\u014d\001\002\000" +
    "\004\011\u0143\001\002\000\004\013\uff3c\001\002\000\050" +
    "\006\125\007\115\013\uff3d\015\126\017\106\020\111\021" +
    "\114\022\113\024\116\025\117\026\120\027\122\030\124" +
    "\032\110\034\112\035\121\036\105\042\123\056\107\001" +
    "\002\000\004\054\u013e\001\002\000\006\013\uff40\035\u0139" +
    "\001\002\000\006\014\uffd2\060\uffd2\001\002\000\006\014" +
    "\uff45\060\uff45\001\002\000\064\005\uffcc\006\uffb5\007\uffb5" +
    "\011\073\013\uffb5\015\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\u0131\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\042" +
    "\uffb5\056\uffb5\066\uffcc\001\002\000\004\043\u0132\001\002" +
    "\000\004\054\u0133\001\002\000\004\011\u0134\001\002\000" +
    "\042\011\020\012\uff4d\015\071\030\027\037\032\046\022" +
    "\047\041\050\045\051\066\052\063\053\015\054\072\055" +
    "\057\056\064\065\047\071\042\001\002\000\004\012\u0136" +
    "\001\002\000\010\004\202\013\uff55\035\uff55\001\002\000" +
    "\006\013\uff54\035\uff54\001\002\000\004\013\u013b\001\002" +
    "\000\040\011\020\015\071\030\027\037\032\046\022\047" +
    "\041\050\045\051\066\052\063\053\015\054\072\055\057" +
    "\056\064\065\047\071\042\001\002\000\050\006\125\007" +
    "\115\013\uff41\015\126\017\106\020\111\021\114\022\113" +
    "\024\116\025\117\026\120\027\122\030\124\032\110\034" +
    "\112\035\121\036\105\042\123\056\107\001\002\000\050" +
    "\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\060\006\065\ufffd\067\ufffd\071\ufffd\072\ufffd\001" +
    "\002\000\004\014\u013d\001\002\000\006\014\uff44\060\uff44" +
    "\001\002\000\004\011\u013f\001\002\000\042\011\020\012" +
    "\uff4d\015\071\030\027\037\032\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\072\055\057\056\064\065" +
    "\047\071\042\001\002\000\004\012\u0141\001\002\000\010" +
    "\004\202\013\uff55\035\uff55\001\002\000\006\013\uff53\035" +
    "\uff53\001\002\000\042\011\020\012\uff4d\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\057\056\064\065\047\071\042\001\002" +
    "\000\004\012\u0145\001\002\000\006\043\u012c\054\u0147\001" +
    "\002\000\006\013\uff40\035\u0139\001\002\000\004\023\u0131" +
    "\001\002\000\004\013\u0149\001\002\000\050\011\ufffd\014" +
    "\ufffd\015\ufffd\030\ufffd\037\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060" +
    "\006\065\ufffd\067\ufffd\071\ufffd\072\ufffd\001\002\000\004" +
    "\014\u014b\001\002\000\006\014\uff43\060\uff43\001\002\000" +
    "\004\054\u0159\001\002\000\040\011\020\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\u0151\056\064\065\047\071\042\001\002" +
    "\000\046\006\125\007\115\015\126\017\106\020\111\021" +
    "\114\022\113\024\116\025\117\026\120\027\122\030\124" +
    "\032\110\034\112\035\121\036\105\042\123\056\107\001" +
    "\002\000\004\040\u0157\001\002\000\050\006\uff96\007\uff96" +
    "\015\uff96\017\uff96\020\uff96\021\uff96\022\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\032\uff96\034\uff96\035\uff96" +
    "\036\uff96\040\u0155\042\uff96\056\uff96\001\002\000\050\006" +
    "\uffab\007\uffab\015\257\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\032\uffab\034" +
    "\uffab\035\uffab\036\uffab\040\uffb8\042\uffab\056\uffab\001\002" +
    "\000\054\006\uff9e\007\uff9e\015\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\100\032\uff9e\033\101\034\uff9e\035\uff9e\036\uff9e\040" +
    "\u0153\042\uff9e\056\uff9e\001\002\000\040\011\020\015\071" +
    "\030\027\037\032\046\022\047\041\050\045\051\066\052" +
    "\063\053\015\054\072\055\057\056\064\065\047\071\042" +
    "\001\002\000\050\006\uff98\007\uff98\013\uff39\015\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\032\uff98\034\uff98\035\uff98\036\uff98\042" +
    "\uff98\056\uff98\001\002\000\040\011\020\015\071\030\027" +
    "\037\032\046\022\047\041\050\045\051\066\052\063\053" +
    "\015\054\072\055\057\056\064\065\047\071\042\001\002" +
    "\000\050\006\uff98\007\uff98\013\uff3b\015\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\032\uff98\034\uff98\035\uff98\036\uff98\042\uff98\056" +
    "\uff98\001\002\000\040\011\020\015\071\030\027\037\032" +
    "\046\022\047\041\050\045\051\066\052\063\053\015\054" +
    "\072\055\057\056\064\065\047\071\042\001\002\000\050" +
    "\006\uff98\007\uff98\013\uff3a\015\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\032\uff98\034\uff98\035\uff98\036\uff98\042\uff98\056\uff98\001" +
    "\002\000\006\005\uffcd\066\uffcd\001\002\000\050\011\020" +
    "\014\ufffe\015\071\030\027\037\032\043\u012c\046\022\047" +
    "\041\050\045\051\066\052\063\053\015\054\u0130\055\057" +
    "\056\064\057\u0129\060\255\065\047\071\042\001\002\000" +
    "\004\014\uffd5\001\002\000\006\014\uffd3\060\uffd3\001\002" +
    "\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\060\006\065\ufffd\067\ufffd\071\ufffd\072" +
    "\ufffd\001\002\000\004\014\u015f\001\002\000\014\002\uff42" +
    "\014\uff42\060\uff42\073\uff42\074\uff42\001\002\000\040\011" +
    "\020\015\071\030\027\037\032\046\022\047\041\050\045" +
    "\051\066\052\063\053\015\054\072\055\057\056\064\065" +
    "\047\071\042\001\002\000\054\005\uffdb\006\125\007\115" +
    "\012\uffdb\015\126\017\106\020\111\021\114\022\113\024" +
    "\116\025\117\026\120\027\122\030\124\032\110\034\112" +
    "\035\121\036\105\041\uffdb\042\123\056\107\001\002\000" +
    "\042\011\020\013\u0164\015\071\030\027\037\032\046\022" +
    "\047\041\050\045\051\066\052\063\053\015\054\072\055" +
    "\057\056\064\065\047\071\042\001\002\000\072\002\uff8c" +
    "\004\uff8c\005\uff8c\006\125\007\115\010\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\126\016\uff8c\017\106\020\111\021\114" +
    "\022\113\024\116\025\117\026\120\027\122\030\124\032" +
    "\110\034\112\035\121\036\105\041\uff8c\042\123\056\107" +
    "\060\uff8c\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030" +
    "\ufffd\037\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060\006\065\ufffd\067" +
    "\ufffd\071\ufffd\072\ufffd\001\002\000\004\014\u0166\001\002" +
    "\000\072\002\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\032\uff8e\034\uff8e\035\uff8e\036\uff8e\041\uff8e" +
    "\042\uff8e\056\uff8e\060\uff8e\001\002\000\004\054\u010c\001" +
    "\002\000\010\005\uffdd\012\uffdd\041\uffdd\001\002\000\004" +
    "\011\u016a\001\002\000\006\012\uffde\054\u010c\001\002\000" +
    "\004\012\u016c\001\002\000\004\013\u016d\001\002\000\050" +
    "\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\043\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\060\006\065\ufffd\071\ufffd\001" +
    "\002\000\004\014\u016f\001\002\000\006\002\uffe0\060\uffe0" +
    "\001\002\000\012\005\uffbc\017\313\023\u0173\061\uffbc\001" +
    "\002\000\004\061\u0172\001\002\000\006\002\uff37\060\uff37" +
    "\001\002\000\006\015\u0178\055\u0174\001\002\000\020\005" +
    "\uff31\015\u0188\016\uff31\026\uff31\040\uff31\060\uff31\061\uff31" +
    "\001\002\000\010\040\ufffd\060\006\061\ufffd\001\002\000" +
    "\010\040\uff35\060\uff35\061\uff35\001\002\000\016\005\uff32" +
    "\016\uff32\026\uff32\040\uff32\060\uff32\061\uff32\001\002\000" +
    "\006\016\uff2d\054\u017a\001\002\000\004\016\u0183\001\002" +
    "\000\004\004\u017f\001\002\000\006\005\uff2b\016\uff2b\001" +
    "\002\000\006\005\u017d\016\uff2e\001\002\000\004\054\u017a" +
    "\001\002\000\006\005\uff2c\016\uff2c\001\002\000\006\015" +
    "\u0178\055\u0174\001\002\000\010\005\uff2a\016\uff2a\026\u0182" +
    "\001\002\000\010\005\uff30\016\uff30\026\uff30\001\002\000" +
    "\010\005\uff2f\016\uff2f\026\uff2f\001\002\000\016\005\uff33" +
    "\016\uff33\026\uff33\040\uff33\060\uff33\061\uff33\001\002\000" +
    "\006\040\u0185\061\u0186\001\002\000\006\015\u0178\055\u0174" +
    "\001\002\000\006\002\uff38\060\uff38\001\002\000\010\040" +
    "\uff36\060\uff36\061\uff36\001\002\000\006\016\uff2d\054\u017a" +
    "\001\002\000\004\016\u018a\001\002\000\016\005\uff34\016" +
    "\uff34\026\uff34\040\uff34\060\uff34\061\uff34\001\002\000\072" +
    "\002\uff7e\004\uff7e\005\uff7e\006\125\007\115\010\uff7e\012" +
    "\uff7e\013\uff7e\014\uff7e\015\126\016\uff7e\017\106\020\111" +
    "\021\114\022\113\024\116\025\117\026\120\027\122\030" +
    "\124\032\110\034\uff7e\035\uff7e\036\uff7e\041\uff7e\042\123" +
    "\056\uff7e\060\uff7e\001\002\000\072\002\uff84\004\uff84\005" +
    "\uff84\006\125\007\115\010\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\126\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\024" +
    "\uff84\025\uff84\026\120\027\122\030\uff84\032\uff84\034\uff84" +
    "\035\uff84\036\uff84\041\uff84\042\uff84\056\uff84\060\uff84\001" +
    "\002\000\004\054\u0190\001\002\000\004\054\uffe7\001\002" +
    "\000\004\054\uffe6\001\002\000\006\011\u0192\015\u0191\001" +
    "\002\000\004\016\u0197\001\002\000\010\011\143\012\uffc6" +
    "\055\144\001\002\000\010\012\uffc7\026\154\041\153\001" +
    "\002\000\004\012\u0195\001\002\000\010\002\uff55\004\202" +
    "\060\uff55\001\002\000\006\002\uffea\060\uffea\001\002\000" +
    "\004\011\u0198\001\002\000\010\011\143\012\uffc6\055\144" +
    "\001\002\000\004\012\u019a\001\002\000\010\002\uff55\004" +
    "\202\060\uff55\001\002\000\006\002\uffe9\060\uffe9\001\002" +
    "\000\050\006\125\007\115\012\u019d\015\126\017\106\020" +
    "\111\021\114\022\113\024\116\025\117\026\120\027\122" +
    "\030\124\032\110\034\112\035\121\036\105\042\123\056" +
    "\107\001\002\000\072\002\uff91\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\032\uff91\034\uff91\035\uff91\036" +
    "\uff91\041\uff91\042\uff91\056\uff91\060\uff91\001\002\000\062" +
    "\005\uffcc\006\uffb5\007\uffb5\011\073\013\uffb5\015\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\042\uffb5\056\uffb5\066\uffcc\001\002\000\012" +
    "\002\uff5c\014\uff5c\060\uff5c\074\u01af\001\002\000\046\011" +
    "\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\060\006\065\ufffd\071\ufffd\073\ufffd\001\002\000\006" +
    "\014\u01a9\073\u01a8\001\002\000\044\011\020\014\uffd0\015" +
    "\071\030\027\037\032\046\022\047\041\050\045\051\066" +
    "\052\063\053\015\054\u019e\055\057\056\064\065\047\071" +
    "\042\073\uffd0\001\002\000\010\014\uffce\060\uffce\073\uffce" +
    "\001\002\000\010\014\ufffd\060\006\073\ufffd\001\002\000" +
    "\046\011\020\014\ufffe\015\071\030\027\037\032\046\022" +
    "\047\041\050\045\051\066\052\063\053\015\054\u019e\055" +
    "\057\056\064\060\255\065\047\071\042\073\ufffe\001\002" +
    "\000\006\014\uffd1\073\uffd1\001\002\000\010\014\uffcf\060" +
    "\uffcf\073\uffcf\001\002\000\004\013\u01aa\001\002\000\010" +
    "\002\uff5d\014\uff5d\060\uff5d\001\002\000\050\011\ufffd\014" +
    "\ufffd\015\ufffd\030\ufffd\037\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060" +
    "\006\065\ufffd\067\ufffd\071\ufffd\072\ufffd\001\002\000\004" +
    "\014\u01ac\001\002\000\006\014\ufffd\060\006\001\002\000" +
    "\004\014\u01ae\001\002\000\010\002\uff5e\014\uff5e\060\uff5e" +
    "\001\002\000\004\013\u01b0\001\002\000\050\011\ufffd\014" +
    "\ufffd\015\ufffd\030\ufffd\037\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060" +
    "\006\065\ufffd\067\ufffd\071\ufffd\072\ufffd\001\002\000\004" +
    "\014\u01b2\001\002\000\010\002\uff5b\014\uff5b\060\uff5b\001" +
    "\002\000\040\011\020\015\071\030\027\037\032\046\022" +
    "\047\041\050\045\051\066\052\063\053\015\054\072\055" +
    "\057\056\064\065\047\071\042\001\002\000\054\002\uffba" +
    "\006\125\007\115\014\uffba\015\126\017\106\020\111\021" +
    "\114\022\113\024\116\025\117\026\120\027\122\030\124" +
    "\032\110\034\112\035\121\036\105\042\123\056\107\060" +
    "\uffba\001\002\000\004\011\u01b6\001\002\000\006\012\uffde" +
    "\054\u010c\001\002\000\004\012\u01b8\001\002\000\004\013" +
    "\u01b9\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd" +
    "\037\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\060\006\065\ufffd\067\ufffd" +
    "\071\ufffd\072\ufffd\001\002\000\004\014\u01bb\001\002\000" +
    "\006\002\uffe1\060\uffe1\001\002\000\040\011\020\015\071" +
    "\030\027\037\032\046\022\047\041\050\045\051\066\052" +
    "\063\053\015\054\072\055\057\056\064\065\047\071\042" +
    "\001\002\000\072\002\uffb0\004\uffb0\005\uffb0\006\125\007" +
    "\115\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\126\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0\026" +
    "\120\027\122\030\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\041\uffb0\042\uffb0\056\uffb0\060\uffb0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bc\000\010\003\003\004\006\006\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\007\066\010\064\011\030\012\010\016\067\017\024\030" +
    "\027\032\050\036\033\040\061\043\043\045\015\047\011" +
    "\050\036\051\007\052\047\054\060\055\045\056\037\061" +
    "\023\073\032\074\057\076\053\077\052\103\025\105\035" +
    "\120\022\122\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\033\u0127\040" +
    "\u012a\045\076\047\011\050\036\052\047\054\060\055\045" +
    "\056\037\061\023\067\u019e\071\u0125\073\032\074\057\075" +
    "\u0129\076\053\077\052\120\022\122\013\001\001\000\040" +
    "\040\u019b\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\004\031\u018c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\040\u018b\045\076\047" +
    "\011\050\036\052\047\054\060\055\045\056\037\061\023" +
    "\073\032\074\057\076\053\077\052\120\022\122\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\040\u018a" +
    "\045\076\047\011\050\036\052\047\054\060\055\045\056" +
    "\037\061\023\073\032\074\057\076\053\077\052\120\022" +
    "\122\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\u0170\025\272\026\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\u010a\014\u0109\015" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\040\255\045\076\047\011\050\036\052\047\054\060" +
    "\055\045\056\037\061\023\073\032\074\057\076\053\077" +
    "\052\120\022\122\013\001\001\000\006\003\251\004\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\040\230\045\076\047\011\050\036\052\047" +
    "\054\060\055\045\056\037\057\233\060\075\061\023\073" +
    "\032\074\057\076\053\077\052\101\231\120\022\122\013" +
    "\001\001\000\002\001\001\000\044\040\073\045\076\047" +
    "\011\050\036\052\047\054\060\055\045\056\037\057\074" +
    "\060\075\061\023\073\032\074\057\076\053\077\052\120" +
    "\022\122\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\003\004\102\001\001\000\040" +
    "\040\103\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\040\040" +
    "\225\045\076\047\011\050\036\052\047\054\060\055\045" +
    "\056\037\061\023\073\032\074\057\076\053\077\052\120" +
    "\022\122\013\001\001\000\040\040\224\045\076\047\011" +
    "\050\036\052\047\054\060\055\045\056\037\061\023\073" +
    "\032\074\057\076\053\077\052\120\022\122\013\001\001" +
    "\000\040\040\221\045\076\047\011\050\036\052\047\054" +
    "\060\055\045\056\037\061\023\073\032\074\057\076\053" +
    "\077\052\120\022\122\013\001\001\000\040\040\220\045" +
    "\076\047\011\050\036\052\047\054\060\055\045\056\037" +
    "\061\023\073\032\074\057\076\053\077\052\120\022\122" +
    "\013\001\001\000\040\040\217\045\076\047\011\050\036" +
    "\052\047\054\060\055\045\056\037\061\023\073\032\074" +
    "\057\076\053\077\052\120\022\122\013\001\001\000\040" +
    "\040\216\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\040\040\215\045\076\047" +
    "\011\050\036\052\047\054\060\055\045\056\037\061\023" +
    "\073\032\074\057\076\053\077\052\120\022\122\013\001" +
    "\001\000\040\040\214\045\076\047\011\050\036\052\047" +
    "\054\060\055\045\056\037\061\023\073\032\074\057\076" +
    "\053\077\052\120\022\122\013\001\001\000\002\001\001" +
    "\000\040\040\174\045\076\047\011\050\036\052\047\054" +
    "\060\055\045\056\037\061\023\073\032\074\057\076\053" +
    "\077\052\120\022\122\013\001\001\000\040\040\173\045" +
    "\076\047\011\050\036\052\047\054\060\055\045\056\037" +
    "\061\023\073\032\074\057\076\053\077\052\120\022\122" +
    "\013\001\001\000\040\040\172\045\076\047\011\050\036" +
    "\052\047\054\060\055\045\056\037\061\023\073\032\074" +
    "\057\076\053\077\052\120\022\122\013\001\001\000\040" +
    "\040\171\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\040\040\170\045\076\047" +
    "\011\050\036\052\047\054\060\055\045\056\037\061\023" +
    "\073\032\074\057\076\053\077\052\120\022\122\013\001" +
    "\001\000\010\023\137\054\141\115\136\001\001\000\040" +
    "\040\134\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\040\040" +
    "\126\045\076\047\011\050\036\052\047\054\060\055\045" +
    "\056\037\061\023\073\032\074\057\076\053\077\052\120" +
    "\022\122\013\001\001\000\002\001\001\000\040\040\131" +
    "\045\076\047\011\050\036\052\047\054\060\055\045\056" +
    "\037\061\023\073\032\074\057\076\053\077\052\120\022" +
    "\122\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\145\023\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\155\001\001\000\002\001\001\000\004\023\151" +
    "\001\001\000\002\001\001\000\004\023\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\157\023\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\040\162\045\076\047\011\050\036\052\047" +
    "\054\060\055\045\056\037\061\023\073\032\074\057\076" +
    "\053\077\052\116\164\117\163\120\022\122\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\040\167\045\076\047\011\050\036" +
    "\052\047\054\060\055\045\056\037\061\023\073\032\074" +
    "\057\076\053\077\052\120\022\122\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\040\073\045\076\047\011\050\036\052\047\054" +
    "\060\055\045\056\037\057\177\060\075\061\023\073\032" +
    "\074\057\076\053\077\052\120\022\122\013\001\001\000" +
    "\002\001\001\000\004\104\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\204\044\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\040\210\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\004\044" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\040\223" +
    "\045\076\047\011\050\036\052\047\054\060\055\045\056" +
    "\037\061\023\073\032\074\057\076\053\077\052\120\022" +
    "\122\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\003\004\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\040\237\045\076\047\011\050\036\052" +
    "\047\054\060\055\045\056\037\061\023\073\032\074\057" +
    "\076\053\077\052\120\022\122\013\001\001\000\002\001" +
    "\001\000\006\003\003\004\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\040\245\045" +
    "\076\047\011\050\036\052\047\054\060\055\045\056\037" +
    "\061\023\073\032\074\057\076\053\077\052\120\022\122" +
    "\013\001\001\000\002\001\001\000\040\040\247\045\076" +
    "\047\011\050\036\052\047\054\060\055\045\056\037\061" +
    "\023\073\032\074\057\076\053\077\052\120\022\122\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\011" +
    "\253\012\010\016\067\017\024\030\027\032\050\036\033" +
    "\040\061\043\043\045\015\047\011\050\036\051\007\052" +
    "\047\054\060\055\045\056\037\061\023\073\032\074\057" +
    "\076\053\077\052\103\025\105\035\120\022\122\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\003\004\257\001\001\000" +
    "\006\100\262\101\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\003\004\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\314\001\001\000\010\024\274\025\272\026" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\302\021\303\023\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\306\001\001" +
    "\000\004\104\307\001\001\000\002\001\001\000\004\026" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\316\021\303\023" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\321\001\001\000\004\104\322\001\001\000\002\001" +
    "\001\000\004\027\324\001\001\000\002\001\001\000\010" +
    "\020\326\021\303\023\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\331\021\303\023\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\076\344\121\343\001\001\000\006" +
    "\076\344\121\u0108\001\001\000\006\076\344\121\u0107\001" +
    "\001\000\006\076\344\121\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\076\344\121\u0104\001\001\000\006" +
    "\076\344\121\350\001\001\000\002\001\001\000\006\076" +
    "\344\121\u0103\001\001\000\006\076\344\121\u0102\001\001" +
    "\000\006\076\344\121\u0101\001\001\000\006\076\344\121" +
    "\u0100\001\001\000\006\076\344\121\377\001\001\000\006" +
    "\076\344\121\376\001\001\000\006\076\344\121\375\001" +
    "\001\000\006\076\344\121\374\001\001\000\006\076\344" +
    "\121\373\001\001\000\006\076\344\121\372\001\001\000" +
    "\006\076\344\121\371\001\001\000\002\001\001\000\006" +
    "\076\344\121\370\001\001\000\006\076\344\121\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\u010e\014\u0109" +
    "\015\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\040\u0112\045\076" +
    "\047\011\050\036\052\047\054\060\055\045\056\037\061" +
    "\023\073\032\074\057\076\053\077\052\120\022\122\013" +
    "\001\001\000\002\001\001\000\010\003\003\004\u0114\034" +
    "\u0115\001\001\000\054\035\u011b\036\u0118\037\u0119\040\061" +
    "\043\043\045\015\047\011\050\036\051\007\052\047\053" +
    "\u0117\054\060\055\045\056\037\061\023\073\032\074\057" +
    "\076\053\077\052\120\022\122\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\040\u011f\045\076\047\011\050" +
    "\036\052\047\054\060\055\045\056\037\061\023\073\032" +
    "\074\057\076\053\077\052\120\022\122\013\001\001\000" +
    "\006\003\u011c\004\u011d\001\001\000\052\036\u0118\037\u011e" +
    "\040\061\043\043\045\015\047\011\050\036\051\007\052" +
    "\047\053\u0117\054\060\055\045\056\037\061\023\073\032" +
    "\074\057\076\053\077\052\120\022\122\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\003\004\u0121\062\u0122\001\001\000\060\033\u0127\040" +
    "\u012a\045\076\047\011\050\036\052\047\054\060\055\045" +
    "\056\037\061\023\063\u0126\064\u012d\067\u012e\070\u0124\071" +
    "\u0125\073\032\074\057\075\u0129\076\053\077\052\102\u012c" +
    "\120\022\122\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u0159" +
    "\004\u015a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\u0137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\040\073\045\076\047\011\050\036\052" +
    "\047\054\060\055\045\056\037\057\u0134\060\075\061\023" +
    "\073\032\074\057\076\053\077\052\120\022\122\013\001" +
    "\001\000\002\001\001\000\004\104\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\040\u0139\045\076\047" +
    "\011\050\036\052\047\054\060\055\045\056\037\061\023" +
    "\073\032\074\057\076\053\077\052\120\022\122\013\001" +
    "\001\000\002\001\001\000\010\003\003\004\u0114\034\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\040\073\045\076\047\011\050\036\052\047" +
    "\054\060\055\045\056\037\057\u013f\060\075\061\023\073" +
    "\032\074\057\076\053\077\052\120\022\122\013\001\001" +
    "\000\002\001\001\000\004\104\u0141\001\001\000\002\001" +
    "\001\000\044\040\073\045\076\047\011\050\036\052\047" +
    "\054\060\055\045\056\037\057\u0143\060\075\061\023\073" +
    "\032\074\057\076\053\077\052\120\022\122\013\001\001" +
    "\000\002\001\001\000\004\102\u0145\001\001\000\004\072" +
    "\u0147\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\003\004\u0114\034\u0149\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\040\u014d\045\u0151" +
    "\046\u014e\047\011\050\036\052\047\054\060\055\045\056" +
    "\037\061\u014f\073\032\074\057\076\053\077\052\120\022" +
    "\122\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\040\u014d\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\u0153\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\040\040" +
    "\u014d\045\076\047\011\050\036\052\047\054\060\055\045" +
    "\056\037\061\023\073\u0155\074\057\076\053\077\052\120" +
    "\022\122\013\001\001\000\002\001\001\000\040\040\u014d" +
    "\045\076\047\011\050\036\052\047\054\060\055\045\056" +
    "\037\061\023\073\u0157\074\057\076\053\077\052\120\022" +
    "\122\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\033\u0127\040\u012a\045\076\047\011\050\036\052\047" +
    "\054\060\055\045\056\037\061\023\064\u015b\067\u012e\070" +
    "\u0124\071\u0125\073\032\074\057\075\u0129\076\053\077\052" +
    "\102\u012c\120\022\122\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\003\004\u0114\034\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\040\u0160\045" +
    "\076\047\011\050\036\052\047\054\060\055\045\056\037" +
    "\061\023\073\032\074\057\076\053\077\052\120\022\122" +
    "\013\001\001\000\002\001\001\000\040\040\u0162\045\076" +
    "\047\011\050\036\052\047\054\060\055\045\056\037\061" +
    "\023\073\032\074\057\076\053\077\052\120\022\122\013" +
    "\001\001\000\002\001\001\000\010\003\003\004\u0114\034" +
    "\u0164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\u016a\014\u0109\015\u010d\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\003\004\u0121\062\u016d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\106\u0174\107" +
    "\u0176\111\u0175\001\001\000\002\001\001\000\006\003\003" +
    "\004\u0183\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\112\u0178\113\u017b\114\u017a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u017d\001\001\000\002\001\001\000\010\107\u0176" +
    "\110\u017f\111\u0180\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u0176\111\u0186\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\112\u0188\113\u017b\114\u017a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\u0193\023\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\u0198\023\u0192\001\001\000\002\001\001" +
    "\000\004\104\u019a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\003\004\u01a1\065\u01a0\001\001\000\002\001" +
    "\001\000\052\033\u0127\040\u012a\045\076\047\011\050\036" +
    "\052\047\054\060\055\045\056\037\061\023\066\u01a3\067" +
    "\u01a2\071\u0125\073\032\074\057\075\u0129\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\006\003" +
    "\u01a4\004\u01a5\001\001\000\050\033\u0127\040\u012a\045\076" +
    "\047\011\050\036\052\047\054\060\055\045\056\037\061" +
    "\023\067\u01a6\071\u0125\073\032\074\057\075\u0129\076\053" +
    "\077\052\120\022\122\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\003\004\u0114\034\u01aa\001\001\000\002\001\001\000" +
    "\006\003\003\004\u01ac\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\003\004\u0114\034" +
    "\u01b0\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\040\u01b3\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\u01b6\014\u0109\015\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\003\004\u0114\034" +
    "\u01b9\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\040\u01bc\045\076\047\011\050\036\052\047\054\060\055" +
    "\045\056\037\061\023\073\032\074\057\076\053\077\052" +
    "\120\022\122\013\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IniParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IniParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IniParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public Types types;
	public PrintStream out = System.out;
	public PrintStream err = System.err;
	private int userTypeIndex = 1;

	public int nextUserTypeIndex() {
		return userTypeIndex++;
	}

	public List<AstNode> topLevels =  new ArrayList<AstNode>();

	public IniEnv env;
	public List<Executable> builtInExecutables;

	private List<Executable> createBuiltInExecutables() {
		return Arrays.asList( //
//			new AnyFunction(this), //
//			new ChannelFunction(this), //
//			new ClearFunction(this), //
//			new CopyFunction(this), //
//			new ErrorFunction(this), //
//			new ExitFunction(this), //
//			new FirstFunction(this), //
//			new KeyFunction(this), //
//			new KeysFunction(this), //
//			new KillAt(this), //
//			new NodeFunction(this), //
//			new PrintFunction(this), //
//			new PrintlnFunction(this), //
//			new ProduceFunction(this), //
//			new ReadKeyboardFunction(this), //
//			new RestFunction(this), //
//			new SizeFunction(this), //
//			new SleepFunction(this), //
//			new SwapFunction(this), //
//			new TimeFunction(this), //
//			new ToIntFunction(this), //
//			new ToJsonFunction(this), //
//			new ToLongFunction(this), //
//			new ToByteFunction(this), //
//			new ToCharFunction(this), //
//			new ToFloatFunction(this), //
//			new ToDoubleFunction(this), //
//			new ToStringFunction(this), //
//			new WaitFunction(this), //
//			// ========================
//			// will be removed from default builtins and accessed through bindings
//			new StartWebServiceFunction(this), //
//			new StopWebServiceFunction(this)
		);
	}
	
	public static IniParser createParserForFile(IniEnv env, IniParser parent, String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.types.createBuiltinUserTypes();
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public static IniParser createParserForCode(IniEnv env, IniParser parent, String code) throws Exception {
      IniScanner scanner= new IniScanner(new java.io.StringReader(code));
      scanner.setFileName("<none>");
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.types.createBuiltinUserTypes();
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public List<SyntaxError> errors = new ArrayList<SyntaxError>();
	
  public void syntax_error(java_cup.runtime.Symbol current) {
    //errors.add(new SyntaxError("syntax error: '"+current.value + "' is not expected", at " + (current.left+1)+"("+(current.right+1)+")" );
    errors.add(new SyntaxError((Token)current.value, "'"+current.value + "' is not expected"));
  }
  
  	public void printErrors(PrintStream out) {
		for (SyntaxError error : errors) {
			out.println(error.toString());
		}
	}

	public boolean hasErrors() {
		return !errors.isEmpty();
	}
  
  
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IniParser$actions {
  private final IniParser parser;

  /** Constructor */
  CUP$IniParser$actions(IniParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IniParser$do_action(
    int                        CUP$IniParser$act_num,
    java_cup.runtime.lr_parser CUP$IniParser$parser,
    java.util.Stack            CUP$IniParser$stack,
    int                        CUP$IniParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IniParser$result;

      /* select the action based on the action number */
      switch (CUP$IniParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // field ::= IDENTIFIER COL list_constructor 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Field(parser,(Token)i,i.toString(),(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(74/*field*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // field_list ::= field 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(73/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // field_list ::= field_list COMMA field 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(73/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // field_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(72/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // field_list_opt ::= field_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(72/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // list_constructor ::= list_constructor MULT 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Constructor(parser,(Token)m,(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(70/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // list_constructor ::= constructor_or_type 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = c; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(70/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // constructor_or_type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(71/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // constructor_or_type ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = c;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(71/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // constructor ::= LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,null,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(69/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // constructor ::= TIDENTIFIER LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(69/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // constructor_list ::= constructor_or_type 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(68/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // constructor_list ::= constructor_list lf_opt TUBE constructor_or_type 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(68/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // usertype ::= TYPE type_decl_list_opt END 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Binding b = new Binding(parser, (Token)t, (String)null, (List)typedecls, (List)null, (TypeVariable)null, (List)null);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*usertype*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // usertype ::= TYPE TIDENTIFIER ASSIGN constructor_list lf_opt END 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		UserType type = new UserType(parser,(Token)t,i.toString(),(List)l);
		// parser.parsedTypes.add(type);
		RESULT = type;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*usertype*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // set_logical_expr ::= var_list OF var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // set_logical_expr ::= var_list OF set_var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // set_logical_expr ::= var_list OF list_expr TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // guard ::= set_logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // guard ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ret_statement ::= RETURN 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,null); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ret_statement ::= RETURN expr 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // boolean_expr_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*boolean_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // boolean_expr_opt ::= ANDAND expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*boolean_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // basic_rule ::= guard LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)g).token(),null,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*basic_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // event_rule ::= DOLLAR LPAREN arg_list_opt RPAREN at_expr boolean_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, (List)el);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*event_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // event_rule ::= at_expr boolean_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*event_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // rule ::= basic_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=r; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // rule ::= event_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=r; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // identifier_assignment_list ::= identifier_assignment 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*identifier_assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // identifier_assignment_list ::= identifier_assignment_list COMMA identifier_assignment 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*identifier_assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // identifier_assignment_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*identifier_assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // identifier_assignment_list_opt ::= identifier_assignment_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*identifier_assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // arg_list ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // arg_list ::= arg_list COMMA lf_opt expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // arg_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // arg_list_opt ::= arg_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // dot_invocation ::= expr INVDOT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object target = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List args = (List)l;
		args.add(0, target);
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),args);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*dot_invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // invocation ::= IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),(List)l);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // pre_post_op ::= var_access MINUSMINUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_DEC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // pre_post_op ::= var_access PLUSPLUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_INC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // at_expr ::= AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, null);

              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // at_expr ::= IDENTIFIER ASSIGN AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, id.toString());

              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // annotations_opt ::= 
            {
              Object RESULT = null;
		
	RESULT = (List)null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // annotations_opt ::= COL LSPAREN identifier_assignment_list RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = (List)l;

              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // field_match_expr_list ::= expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(77/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // field_match_expr_list ::= field_match_expr_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(77/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // field_match_expr_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(76/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // field_match_expr_list_opt ::= field_match_expr_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(76/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // case_expr ::= CASE basic_rule ELSE LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // case_expr ::= CASE basic_rule 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // case_expr ::= CASE LCPAREN basic_rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // case_expr ::= CASE LCPAREN basic_rule_list_opt DEFAULT LCPAREN statement_list_opt RCPAREN lf_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ltl_expr ::= LPAREN ltl_expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ltl_expr ::= EVENTUALLY ltl_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.EVENTUALLY,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ltl_expr ::= ALWAYS ltl_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.ALWAYS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ltl_expr ::= ltl_expr IMPLIES ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.IMPLIES,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ltl_expr ::= ltl_expr DIV ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.DIV,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ltl_expr ::= ltl_expr MULT ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MULT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ltl_expr ::= MINUS ltl_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.MINUS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ltl_expr ::= ltl_expr MINUS ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MINUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ltl_expr ::= ltl_expr PLUS ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ltl_expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Integer.parseInt(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ltl_expr ::= NUM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Double.parseDouble(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ltl_expr ::= ltl_expr GTE ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ltl_expr ::= ltl_expr GT ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ltl_expr ::= ltl_expr LTE ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ltl_expr ::= ltl_expr LT ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ltl_expr ::= ltl_expr NOTEQUALS ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.NOTEQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ltl_expr ::= ltl_expr EQUALS ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.EQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ltl_expr ::= NOT ltl_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.NOT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ltl_expr ::= ltl_expr OROR ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.OR,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ltl_expr ::= ltl_expr ANDAND ltl_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.AND,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ltl_expr ::= boolean_literal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ltl_expr ::= IDENTIFIER 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)e,e.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(79/*ltl_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // logical_expr ::= expr MATCHES constructor_match_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(ConstructorMatchExpression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // logical_expr ::= expr MATCHES invocation 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // logical_expr ::= expr GTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // logical_expr ::= expr GT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logical_expr ::= expr LTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logical_expr ::= expr LT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logical_expr ::= expr NOTEQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.NOTEQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logical_expr ::= expr EQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.EQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logical_expr ::= QUESTION expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.OPT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logical_expr ::= NOT expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.NOT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logical_expr ::= expr OROR expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.OR,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logical_expr ::= expr ANDAND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.AND,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logical_expr ::= boolean_literal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // algebraic_expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.DIV,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // algebraic_expr ::= expr MULT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MULT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // algebraic_expr ::= MINUS expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.MINUS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // algebraic_expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MINUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // algebraic_expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // algebraic_expr ::= pre_post_op 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=op; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // algebraic_expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Integer.parseInt(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // algebraic_expr ::= NUM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Double.parseDouble(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // list_concat_expr ::= expr AND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.CONCAT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(78/*list_concat_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN SWING_RIGHT_ARROW LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Process(parser, (Token)def, null, (List)vars, (List)rules);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lambda_expr ::= LAMBDA param_list_opt IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));	
		f.oneExpressionLambda = true;
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));
		f.oneExpressionLambda = true;
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lambda_expr ::= LAMBDA param_list_opt IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // conditional_expr ::= expr QUESTION expr COL expr 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ConditionalExpression(parser, (Token)q, (Expression)c, (Expression)t, (Expression)f);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(80/*conditional_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= conditional_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= lambda_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= list_concat_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= constructor_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= list_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= string_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= algebraic_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= CHAR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new CharLiteral(parser,(Token)c,c.toString().charAt(0)); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= THIS 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ThisLiteral(parser,(Token)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement ::= ret_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(29/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(29/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // top_level_statement ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // top_level_statement ::= assignment_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // top_level_statement ::= case_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignment_list ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment_list ::= assignment_list COMMA lf_opt IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignment_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignment_list_opt ::= assignment_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constructor_match_expr ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(TypeVariable)t);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(75/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constructor_match_expr ::= TIDENTIFIER LSPAREN field_match_expr_list_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),(List)l);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(75/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // constructor_expr ::= LSPAREN assignment_list RSPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new SetConstructor(parser,(Token)c,null,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // constructor_expr ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetConstructor(parser,(Token)s,s.toString(),null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constructor_expr ::= TIDENTIFIER LSPAREN lf_opt assignment_list_opt lf_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new SetConstructor(parser,(Token)s,s.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // list_expr ::= LSPAREN arg_list_opt lf_opt RSPAREN 
            {
              Object RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ListExpression(parser,(Token)open,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // list_expr ::= LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ub = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetDeclaration(parser,(Token)l,(Expression)lb,(Expression)ub);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // single_string ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new StringLiteral(parser,(Token)s,s.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*single_string*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // string_expr ::= single_string PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // string_expr ::= single_string 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=s; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // var_access ::= expr DOT IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new FieldAccess(parser,(Token)t,(Expression)v,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var_access ::= expr LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new SubArrayAccess(parser,(Token)t,(Expression)v,(Expression)min,(Expression)max); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var_access ::= expr LSPAREN expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new ArrayAccess(parser,(Token)t,(Expression)v,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var_access ::= IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean_literal ::= FALSE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,false); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolean_literal ::= TRUE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // set_var_access ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*set_var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // identifier_assignment ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,new Variable(parser,(Token)v,v.toString()),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*identifier_assignment*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type_decl ::= TIDENTIFIER LT TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		TypeVariable tv = new TypeVariable(parser,(Token)i,i.toString());
		TypeVariable sv = new TypeVariable(parser,(Token)s,s.toString());
		tv.superType = sv;
		RESULT = tv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type_decl ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type_decl_list ::= type_decl 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		((TypeVariable)t).parameter=true;
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type_decl_list ::= type_decl_list COMMA type_decl 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		((TypeVariable)t).parameter=true;
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type_decl_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_decl_list_opt ::= type_decl_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= type IMPLIES type 
            {
              Object RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		TypeVariable ft = new TypeVariable(parser,(Token)token,"function");
		ft.typeParameters = new ArrayList(); 
		ft.typeParameters.add((TypeVariable)t);
		ft.typeParameters.add((TypeVariable)type);
		RESULT = ft;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= LPAREN type_list RPAREN IMPLIES type 
            {
              Object RESULT = null;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		TypeVariable ft = new TypeVariable(parser,(Token)token,"function");
		ft.typeParameters = new ArrayList(); 
		ft.typeParameters.add((TypeVariable)t);
		ft.typeParameters.addAll((List)types);
		RESULT = ft;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= type MULT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new TypeVariable(parser,((TypeVariable)t).token,(TypeVariable)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= TIDENTIFIER LPAREN type_list RPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		TypeVariable tv = new TypeVariable(parser,(Token)i,i.toString()); 
		tv.typeParameters = (List)types;
		RESULT = tv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_opt ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = t; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_list ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_list ::= type_list COMMA type 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_list_opt ::= type_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_list ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_list ::= var_list COMMA IDENTIFIER 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // basic_rule_list ::= basic_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*basic_rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // basic_rule_list ::= basic_rule_list lf basic_rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*basic_rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // basic_rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*basic_rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // basic_rule_list_opt ::= lf_opt basic_rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*basic_rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rule_list ::= rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rule_list ::= rule_list lf rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rule_list_opt ::= lf_opt rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_list ::= statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=new Sequence(s);
		RESULT=seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_list ::= statement_list lf statement 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=(Sequence)l;
		seq.last().setNext(s);
		RESULT = seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_list_opt ::= lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_list_opt ::= lf_opt statement_list lf_opt 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(11/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString(),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(11/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param_list ::= param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(p);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(p);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param_list_opt ::= param_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function ::= PROCESS IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Process p = new Process(parser, (Token)def, name.toString(), (List)vars, (List)rules);
		RESULT = p;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= FUNCTION IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Function f = new Function(parser, (Token)def, name.toString(), (List)vars, (Sequence)statements);
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // at_binding ::= DECLARE AT IDENTIFIER at_binding_conf_type LPAREN type_list_opt RPAREN IMPLIES STRING 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		AtBinding b = new AtBinding(parser, (Token)d, name.toString(), (List)ct, (List) rt, className.toString());
		//parser.parsedAtBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*at_binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // at_binding_conf_type ::= LSPAREN type_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = ct;

              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // at_binding_conf_type ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // visibility ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*visibility*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // visibility ::= MINUS 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=ChannelDeclaration.Visibility.LOCAL; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*visibility*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // visibility ::= PLUS 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=ChannelDeclaration.Visibility.GLOBAL; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*visibility*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // predicate_decl ::= PREDICATE IDENTIFIER ltl_expr END 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new LTLPredicate(parser, (Token)d, name.toString(), (AstNode)expression);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*predicate_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // channel_decl ::= CHANNEL visibility IDENTIFIER LSPAREN RSPAREN LPAREN type_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ChannelDeclaration(parser, (Token)d, name.toString(), (TypeVariable)t, (ChannelDeclaration.Visibility)v, true, (List)a);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*channel_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // channel_decl ::= CHANNEL visibility IDENTIFIER LPAREN type_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ChannelDeclaration(parser, (Token)d, name.toString(), (TypeVariable)t, (ChannelDeclaration.Visibility)v, false, (List)a);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*channel_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binding ::= DECLARE LPAREN type_decl_list_opt lambda_opt RPAREN IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-11)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-11)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)typedecls, (List)types, (TypeVariable)rtype, (List)a);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binding ::= DECLARE IDENTIFIER lambda_opt LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)null, (List)types, (TypeVariable)rtype, (List)a);
		//parser.parsedBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // import_decl ::= IMPORT STRING 
            {
              Object RESULT = null;
		int itokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int itokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object itoken = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int filePathleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int filePathright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object filePath = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Import i = new Import(parser, (Token)itoken, filePath.toString());
		RESULT = i;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*import_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // program_elt ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program_elt ::= predicate_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // program_elt ::= channel_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program_elt ::= usertype 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program_elt ::= function 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program_elt ::= at_binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program_elt ::= binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program_elt ::= import_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program_elt_list ::= program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program_elt_list ::= program_elt_list lf program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_elt_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_elt_list_opt ::= program_elt_list lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini_program ::= lf_opt program_elt_list_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*ini_program*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lambda_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*lambda_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lambda_opt ::= LAMBDA 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*lambda_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lf_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lf_opt ::= lf 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lf ::= LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lf ::= lf LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini_program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		RESULT = start_val;
              CUP$IniParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$IniParser$parser.done_parsing();
          return CUP$IniParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

