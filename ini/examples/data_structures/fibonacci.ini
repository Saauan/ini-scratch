
import "ini/lib/math.ini"

/*
 * This example implements several algorithms around the Fibonacci sequence.
 */
process main() {
	@init() {
		f=8
		fib=fib(f)
		println("Fib("+f+")="+fib)
		
		f = 5
		println("Here is a flat Fibonacci tree for "+f+":")
		println(fibtree_flat(f))

		fibtree1 = fibtree1(f)
		println("Here is a non-flat Fibonacci tree for "+f+":")
		println(fibtree1)
		println("Fibtree("+f+").left.value = "+fibtree1.left.value)
		println("Fibtree("+f+").right.value = "+fibtree1.right.value)
		println("Fibtree("+f+").left.left.value = "+fibtree1.left.left.value)
		println("Fibtree("+f+").left.right.value = "+fibtree1.left.right.value)
		println("Fibtree("+f+").right.left.value = "+fibtree1.right.left.value)
		println("Fibtree("+f+").right.right.value = "+fibtree1.right.right.value)
		
		fibtree = fibtree2(f)
		println("Here is a non-flat Fibonacci tree for "+f+":")
		println(fibtree)

		fibtree = fibtree3(Node[value=f])
		println("Here is a non-flat Fibonacci tree for "+f+":")
		println(fibtree)

		fibtree = fibtree4(Node[value=f])
		println("Here is a non-flat Fibonacci tree for "+f+":")
		println(fibtree)

		fibtree = fibtree5(f)
		println("Here is a non-flat Fibonacci tree for "+f+":")
		println(fibtree)
		
	}
}

/*
 * A process to calculate the Fibonacci sequence.
 * fib(i)=fib(i-1)+fib(i-2)
 * x<0 fib(x)=0
 * fib(1)=0
 * First values: 1,1,2,3,5,8,13,21,34,55
 */
process fib(n) {
	@init() {
		fib_n_2=0
		fib_n_1=1
		fib=1
		i=1
	}
	i<n {
		fib_n_2=fib_n_1
		fib_n_1=fib
		fib=fib_n_2+fib_n_1
		i++
	}
	@end() {
		return fib
	}
}

/*
 * A process to construct a Fibonacci tree, which will be stored in a list.
 * For node in nodes, value(node)>2 => 
 * 		value(node.left) = value(node)-1
 *  	value(node.right) = value(node)-2
 * value(node)=2 => 
 * 		value(node.left) = 1
 *  	value(node.right) = 1
 */
process fibtree_flat(n) {
	@init() {
		f[1]=n
		// the list indices will vary to 2^n, which is too much 
		// to store the tree (upper bound for a well-balanced tree)
		range=[1..to_int(pow(2.0,to_float(n)))]
	}
	i of range | f[i]>2 && !f[i*2] {
		f[i*2] = f[i] - 1
		f[i*2+1] = f[i] - 2
	}
	i of range | f[i]==2 && !f[i*2] {
		f[i*2] = 1
		f[i*2+1] = 1
	}
	@end() {
		return f
	}
}

declare type Tree1 = [value:Int,left:Tree1,right:Tree1]

/*
 * A process to construct a Fibonacci tree in an actual tree data structure.
 * For node in nodes, value(node)>2 => 
 * 		value(node.left) = value(node)-1
 *  	value(node.right) = value(node)-2
 * value(node)=2 => 
 * 		value(node.left) = 1
 *  	value(node.right) = 1
 */

process fibtree1(v) {
	@init() { 
		root = Tree1[value=v] 
	}
	n of Tree1 | n.value > 2 && !n.left {
		n.left = Tree1[value=n.value - 1]
		n.right = Tree1[value=n.value - 2]
	}
	n of Tree1 | n.value == 2 && !n.left {
		n.left = Tree1[value=1]
		n.right = Tree1[value=1]
	}
	@end() {
		return root
	}
}

declare type Tree = Leaf[value:Int]
                  | Node[value:Int,left:Tree,right:Tree]

/*
 * A nicest version.
 */
process fibtree2(v) {
	@init() {
		root = Node[value=v]
	}
	n of Node | n ~ Node[value>2,!left,!right] {
		n.left = Node[value=n.value - 1]
		n.right = Node[value=n.value - 2]
	}
	n of Node | n ~ Node[value==2,!left,!right] {
		n.left = Leaf[value=1]
		n.right = Leaf[value=1]
	}
	@end() {
		return root
	}
}

/*
 * A nice reccursive version.
 */
function fibtree3(n) {
	case n ~ Node[value==2,!left,!right] {
		n.left = Leaf[value=1]
		n.right = Leaf[value=1]
	}
	case n ~ Node[value>2,!left,!right] {
		n.left = fibtree3(Node[value=n.value - 1])
		n.right = fibtree3(Node[value=n.value - 2])
	}
	return n
}

function fibtree4(n) {
	case n ~ Node[value==2,!left,!right] {
		return Node[left=Leaf[value=1],
		         right=Leaf[value=1]]
	}
	case n ~ Node[value>2,!left,!right] {
		return Node[left=fibtree4(Node[value=n.value - 1]),
		         right=fibtree4(Node[value=n.value - 2])]
	}
	return n
}

/*
 * The functional version.
 */
function fibtree5(n) {
	case n == 1 {
		return Leaf[value=1]
	}
	case n == 2 {
		return Node[value=2,left=Leaf[value=1],
		            right=Leaf[value=1]]
	}
	case n > 2 {
		return Node[value=n,left=fibtree5(n - 1),
		            right=fibtree5(n - 2)]
	}
}

