/*
 * This example builds a simple algebraic expression AST, with some useful functions.
 */

declare type Expr = Number[value:Float]
                  | Plus[left:Expr,right:Expr]
                  | Mult[left:Expr,right:Expr]
                  | Div[left:Expr,right:Expr]
                  | Minus[left:Expr,right:Expr]
                  | UMinus[operand:Expr]

process main() {
	@init() {
		expr = UMinus[operand=Plus[
		  left=Mult[
		    left=Number[value=3.0],
		    right=Number[value=2.0]],
		  right=Number[value=1.0]  
	    ]]
	}
	// this rule can be added to check if the operators where 
	// correctly constructed
	op of Plus | (!op.left) || (!op.right) {
		error("invalid plus operator")
	}
	@end() {
		println("The value of "+expr_string(expr)+" is "+expr_value(expr))
	}
}

/*
 * Pretty string of an AST.
 */
function expr_string(expr) {
	case expr ~ Number[value] {
		return to_string(expr.value)
	}
	case expr ~ Plus[left,right] {
		return "("+expr_string(expr.left)+"+"+expr_string(expr.right)+")"
	}
	case expr ~ Mult[left,right] {
		return "("+expr_string(expr.left)+"*"+expr_string(expr.right)+")"
	}
	case expr ~ Minus[left,right] {
		return "("+expr_string(expr.left)+"-"+expr_string(expr.right)+")"
	}
	case expr ~ Div[left,right] {
		return "("+expr_string(expr.left)+"/"+expr_string(expr.right)+")"
	}
	case expr ~ UMinus[operand] {
		return "-("+expr_string(expr.operand)+")"
	}
}

/*
 * Calculates the expression.
 */
function expr_value(expr) {
	case expr ~ Number[value] {
		return expr.value
	}
	case expr ~ Plus[left,right] {
		return expr_value(expr.left)+expr_value(expr.right)
	}
	case expr ~ Mult[left,right] {
		return expr_value(expr.left)*expr_value(expr.right)
	}
	case expr ~ Minus[left,right] {
		return expr_value(expr.left)-expr_value(expr.right)
	}
	case expr ~ Div[left,right] {
		return expr_value(expr.left)/expr_value(expr.right)
	}
	case expr ~ UMinus[operand] {
		return -expr_value(expr.operand)
	}
}

