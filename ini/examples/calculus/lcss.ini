
import "ini/lib/math.ini"

# This example shows a classical algorithm to compute the LCSS (Longest Common Sub-Sequence)

declare type Point = [x:Number, y:Number]

function main() {
	t1 = [ Point[x=0.0,y=1.0], Point[x=1.0,y=1.0], Point[x=2.0,y=2.0] ]
	t2 = [ Point[x=0.0,y=0.0], Point[x=1.0,y=1.0], Point[x=2.0,y=2.0] ]
	println(lcss(t1, t2, 0.0))
}

function lcss(t1, t2, e) {
	case size(t1) == 0 || size(t2) == 0 {
		return 0
	}
	case dist(first(t1),first(t2))<=e {
		return lcss(rest(t1), rest(t2), e) + 1
	}
	return max(lcss(rest(t1), t2, e), lcss(t1, rest(t2), e))
}


function dist(p1,p2) {
	dx = p2.x-p1.x
	dy = p2.y-p1.y
	return sqrt(dx*dx+dy*dy)
}
