
import "ini/lib/io.ini"
import "ini/lib/net.ini"

function main(args) {
	@init() && size(args)>0 {
		start_http_server(to_int(parse_number(args[0])), handler)
	}
	@init() && size(args)==0 {
		start_http_server(8080, handler)
	}
}

function start_http_server(port, handler) {
	@init() {
		s = socket_server(port)
		clear(c)
		println("Server started on "+port)
	}
	s { 
		c = socket_accept(s)
	}
	@update(old,c) [variable=c] {
		client = socket_address(c)
		println(to_string(host_name(client))+" connected to server")
		in = buffered_reader(reader(socket_input_stream(c)))
		out = data_output_stream(socket_output_stream(c))
		handle_http_request(in, out, handler)
	}	
}

function handle_http_request(in, out, handler) {
	line!="" {
		line = read_line(in)
	}
	line ~ regexp("(GET) (.*) (.*)", get, path, version) {
		println("GET REQUEST: "+path+" - "+version)
	}
	line ~ regexp("(POST) (.*) (.*)", post, path, version) {
		println("POST REQUEST: "+path+" - "+version)
	}
	line ~ regexp("Host: (.*)", host) {}
	line ~ regexp("Content-Length: (.*)", content_length) {}
	@end() && get && path ~ regexp("([^?]*)(\\?(.*))?", path, unused, params_string) {
		to_map(params, params_string)
		respond(out, handler, path, host, params)
	}
	@end() && post {
		to_map(params, read_string(in,to_int(parse_number(content_length))))
		respond(out, handler, path, host, params)
	}
	@error() {
		println("Internal error")
	}
}

function to_map(params, params_string) {
	params_string ~ regexp("([^=]*)=([^&]*)&(.*)", param, value, params_string) {
		params[param]=url_decode(value)
	}
	params_string ~ regexp("([^=]*)=([^&]*)", param, value, params_string) {
		params[param]=url_decode(value)
	}
}

function respond(out, handler, path, host, params) {
	@init() {
		body = handler(path, host, params)
		write_string(out, "HTTP/1.0 200 OK\r\n")
		write_string(out, "Connection: close\r\n")
		write_string(out, "Server: INI v0\r\n")
		write_string(out, "Content-Type: text/html\r\n")
		write_string(out, "Content-Length: "+size(body)+"\r\n\r\n")
		write_string(out, body)
		close_data_output_stream(out)
		println("end of request")
	}
}

function handler(path, host, params) {
	@init() {
		s = "<html><body>" + get_example_links()
	}
	path == "/index" {
			path = "/ini"
	}
	path == "/example" && params["name"] {
			params["code"] = file_read_content("ini/examples/"+params["name"]+".ini")
			path = "/ini"
	}
	path == "/eval" {
			result = eval_string(params["code"])
			path="/ini"
	}
	path == "/ini" {
			s = s + "<center><form action=\"eval\" method=\"post\">"
			s = s + "INI Program: <b>"+params["name"]+"</b><br/><textarea name=\"code\" cols=100 rows=25>"+params["code"]+"</textarea><br/>"
			s = s + "<input type=\"hidden\" name=\"name\" value=\""+params["name"]+"\" /> <input type=\"submit\" value=\"Eval\"/><br/><br/>"
			s = s + "Program output<br/><textarea name=\"result\" cols=100 rows=8>" + result + "</textarea>"
			s = s + "</form></center>"
			clear(path)
	}
	@error() {
		s = "Unexpected error"
	}
	@end() {
		s = s + "<br/><hr/><center>Powered by INI - Copyright 2010, Renaud Pawlak</center></body></html>"
		return s
	}
}

function get_example_links() {
	@init() {
		l = file_list(file("ini/examples"))
		i = 0
		s = "<center>"
	}
	i < size(l) && file_name(l[i]) ~ regexp("(.*)\\.ini", name) {
		s = s + "<a href=\"example?name="+name+"\">"+name+"</a> | "
		i++
	}
	i < size(l) && !(file_name(l[i]) ~ regexp(".*\\.ini")) { i++ }
	@end() {
		s = s + "</center><br/>"
		return s
	}
}
